import { useEffect, useState } from 'react';
import useGameStore from '@stores/useGameStore';
import { useSocketStore } from '@stores/socketStore';
import CodeEditor from '@components/Ide/SingleCodeEditor';
import Terminal from '@components/Ide/Terminal';
import IdeFooter from '@components/Ide/IdeFooter';
import ProblemInfo from '@components/Ide/ProblemInfo';
import SideProblemModal from '@components/Ide/SideProblemModal';
import GameUserList from '@components/Ide/GameUserList';
import useAuthStore from '@stores/authStore';
import { User } from 'types/types';
import useModalStore from '@stores/modalStore';
import { GAME_TYPES, MODAL_TYPES, RESULT_TYPES } from 'types/modalTypes';
import { toast } from 'react-toastify';

const MAX_REQUESTS = 1;

export interface SubmittedTeam {
  code: string;
  createdAt: string;
  duration: string | null;
  executeMemory: string | null;
  executeTime: string | null;
  gameResult: number;
  lang: string;
  members: Member[];
  passRate: number;
  point: number;
  teamId: number;
  totalHeadCount: number;
}

export interface Member {
  nickname: string;
  profileImage: string;
  tierId: number;
  userId: number;
}

const SingleIdePage = () => {
  const { gameId, roomId, users, setUserRoomId, setIsFinish } = useGameStore();
  const { subscribe, sendMessage, connected } = useSocketStore();
  const { openModal } = useModalStore();

  const [sideProblem, setSideProblem] = useState(null);
  const [completeUsers, setCompleteUsers] = useState<number[]>([]);
  const [userProgress, setUserProgress] = useState<Record<number, number>>({});
  const [leftUsers, setLeftUsers] = useState<User[]>([]);

  const [code, setCode] = useState('');
  const [language, setLanguage] = useState<'python' | 'java'>('python');
  const [showModal, setShowModal] = useState(false);
  const [requestCount, setRequestCount] = useState(0);
  const [output, setOutput] = useState<string>('');
  const { userId } = useAuthStore();
  const userRoomId = users.find(user => user.userId === Number(userId))?.roomId;
  console.log('roomId:', userRoomId);

  useEffect(() => {
    if (userRoomId && userRoomId !== roomId) {
      setUserRoomId(userRoomId);
    }
  }, [userId, users, roomId, setUserRoomId]);

  useEffect(() => {
    if (users.length > 0) {
      const initialProgress = users.reduce(
        (acc, user) => {
          acc[user.userId] = 0;
          return acc;
        },
        {} as Record<number, number>
      );

      setUserProgress(initialProgress);
    }
  }, [users]);

  useEffect(() => {
    if (!connected) return;

    // ÏÇ¨Ïù¥Îìú Î¨∏Ï†ú Íµ¨ÎèÖ
    subscribe(`/sub/${gameId}/${userRoomId}/side-problem/receive`, data => {
      // console.log('üì© ÏÇ¨Ïù¥Îìú Î¨∏Ï†ú ÏàòÏã†:', data);
      setSideProblem(data);
      setShowModal(true);
    });

    // ÏΩîÎìú Ï±ÑÏ†ê Í≤∞Í≥º Íµ¨ÎèÖ
    subscribe(`/sub/${gameId}/${userRoomId}/team-submission/result`, data => {
      console.log('üì© ÏΩîÎìú Ï±ÑÏ†ê Í≤∞Í≥º ÏàòÏã†:', data);

      if (data.type === 'ÌåÄ Ï†úÏ∂ú Í≤∞Í≥º' && data.data.status === 'F') {
        console.log('ÌãÄÎ¶∞Í±∞ Ïôú ÏïàÎú®ÏßÄ?');

        toast.error(
          `ÌãÄÎ†∏ÏäµÎãàÎã§! \nTC ${data.data.totalCount}Í∞ú Ï§ë ${data.data.passCount}Í∞ú ÎßûÏïòÏäµÎãàÎã§.`,
          {
            position: 'bottom-center',
            autoClose: 5000,
          }
        );
      }
    });

    // Ïã§ÏãúÍ∞Ñ Í≤åÏûÑ ÌòÑÌô© Íµ¨ÎèÖ
    subscribe(`/sub/game/${gameId}/submission/result`, data => {
      console.log('üì© Ïã§ÏãúÍ∞Ñ Í≤åÏûÑ ÌòÑÌô© ÏàòÏã†:', data);

      // console.log('data:', data);

      if (data?.type === 'Í≤åÏûÑ ÌòÑÌô©' && data.data.gameType === 'S') {
        const submittedTeam: SubmittedTeam = data.data.submittedTeam;

        // submittedTeamÏùò gameResultÍ∞Ä 0Ïù¥ ÏïÑÎãàÎã§ -> Î¨∏Ï†úÎ•º Ìï¥Í≤∞Ìï®
        // => submittedTeam.members[0].userIdÎ•º completeUsers, userProgressÏóê Ï∂îÍ∞Ä
        // sumittedTeamÏùò gameResultÍ∞Ä 0Ïù¥Îã§ -> Î¨∏Ï†úÎ•º Ìï¥Í≤∞ÌïòÏßÄ Î™ªÌï®
        // => userProgress[member.userId] = submittedTeam.passRate Ï∂îÍ∞Ä
        // userProgress[member.userId] = 100Ïù¥ ÎêòÎ©¥ userProgressÏóêÏÑú Ìï¥Îãπ ÌÇ§ÏôÄ Í∞íÏùÑ ÏÇ≠Ï†ú

        setUserProgress(prev => ({
          ...prev,
          [submittedTeam.members[0].userId]: submittedTeam.passRate,
        }));

        setUserProgress(prev => {
          const updatedProgress = { ...prev };
          Object.keys(updatedProgress).forEach(userId => {
            if (updatedProgress[Number(userId)] === 100) {
              delete updatedProgress[Number(userId)];
            }
          });

          return updatedProgress;
        });

        if (submittedTeam.gameResult > 0) {
          setCompleteUsers(prev => [...new Set([...prev, submittedTeam.members[0].userId])]);
        }

        // ÎßåÏïΩ Ï†ïÎãµÏù¥Í≥†, Ï†ïÎãµÏùÑ ÎßûÏ∂ò userIdÍ∞Ä ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú Ïú†Ï†ÄÏùò userIdÎùºÎ©¥
        if (submittedTeam.gameResult > 0 && submittedTeam.members[0].userId === userId) {
          setRequestCount(2);
          setIsFinish('WIN');
          openModal(MODAL_TYPES.RESULT, {
            type: GAME_TYPES.SINGLE,
            result: RESULT_TYPES.SUCCESS,
          });
        }
      }

      // // ‚úÖ submittedTeamÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
      // if (submittedTeam?.gameResult > 0 && Array.isArray(submittedTeam.members)) {
      //   submittedTeam.members.forEach((member: MemberInfo) => {
      //     if (!completeUsers.includes(member.userId)) {
      //       // ‚úÖ Ï§ëÎ≥µ Ï≤¥ÌÅ¨ ÌõÑ Ï∂îÍ∞Ä
      //       completeUsers.push(member.userId);
      //       updatedProgress[member.userId] = 100; // ÌÜµÍ≥ºÏú® 100%
      //       console.log('Î¨∏Ï†ú ÎßûÌûå ÏÇ¨Îûå:', member.userId);
      //     }

      //     if (member.userId === userId) {
      //       // ÏÇ¨Ïù¥Îìú Î¨∏Ï†ú Î™®Îã¨ ÎßâÍ∏∞
      //       setRequestCount(5);
      //       setIsFinish('WIN');
      //       console.log('single isFinish:', isFinish);

      //       openModal(MODAL_TYPES.RESULT, {
      //         type: GAME_TYPES.SINGLE,
      //         result: RESULT_TYPES.SUCCESS,
      //       });
      //     }
      //   });
      // } else if (submittedTeam?.gameResult === 0 && Array.isArray(submittedTeam.members)) {
      //   submittedTeam.members.forEach((member: MemberInfo) => {
      //     updatedProgress[member.userId] = submittedTeam.passRate;
      //   });
      // }

      // setCompleteUsers(completeUsers);
      // setUserProgress(prev => ({ ...prev, ...updatedProgress }));
    });

    // Ìá¥Ïû•ÌïòÍ∏∞ Íµ¨ÎèÖ
    subscribe(`/sub/single/room/${gameId}`, data => {
      console.log('Ìá¥Ïû•ÌïòÍ∏∞ Íµ¨ÎèÖ Îç∞Ïù¥ÌÑ∞:', data);

      if (data.type === 'GAME_IN_PROGRESS_LEAVE') {
        const { leftUser } = data.data;

        // leftUser.userIdÍ∞Ä userProgressÏóê ÏûàÎã§Î©¥ userProgressÏóêÏÑú Ï†úÍ±∞
        setUserProgress(prev => {
          const updatedProgress = { ...prev };
          if (updatedProgress[leftUser.userId] !== undefined) {
            delete updatedProgress[leftUser.userId];
          }
          return updatedProgress;
        });

        // leftUser.userIdÍ∞Ä completeUsersÏóê ÏûàÎã§Î©¥ leftUsersÏóê Ï†ÄÏû•ÌïòÏßÄ ÏïäÏùå
        setLeftUsers(prev => {
          if (!completeUsers.includes(leftUser.userId)) {
            return [...prev, leftUser]; // completeUsersÏóê ÏóÜÏúºÎ©¥ leftUserÏóê Ï∂îÍ∞Ä
          }
          return prev; // completeUsersÏóê ÏûàÏúºÎ©¥ Î∞òÌôò
        });
      }
    });

    return () => {
      // Î™®Îì† Íµ¨ÎèÖ Ìï¥Ï†ú
    };
  }, []);

  // ‚úÖ ÏÇ¨Ïù¥Îìú Î¨∏Ï†ú ÏöîÏ≤≠
  const requestSideProblem = () => {
    sendMessage(`/pub/side/receive`, { gameId, teamId: userRoomId });

    // console.log('üì® ÏÇ¨Ïù¥Îìú Î¨∏Ï†ú ÏöîÏ≤≠ Ï†ÑÏÜ°');
  };

  // ‚úÖ 10Î∂ÑÎßàÎã§ ÏûêÎèôÏúºÎ°ú ÏÇ¨Ïù¥Îìú Î¨∏Ï†ú ÏöîÏ≤≠
  useEffect(() => {
    if (!connected) return;
    if (requestCount >= MAX_REQUESTS) return;

    const interval = setInterval(() => {
      if (requestCount < MAX_REQUESTS) {
        requestSideProblem();
        setRequestCount(prev => prev + 1);
      } else {
        clearInterval(interval);
      }
    }, 10 * 1000);

    return () => clearInterval(interval);
  }, [requestCount]);

  useEffect(() => {
    if (sideProblem) {
      setShowModal(true);
    }
  }, [sideProblem]);

  return (
    <div className="flex max-h-screen bg-primary-black border-t border-gray-04">
      <div className="min-w-[23em] max-w-[30rem] border-r border-gray-04">
        <ProblemInfo />
      </div>

      <div className="max-w-[65rem] flex-[46rem] border-r border-gray-04">
        <CodeEditor
          code={code}
          setCode={setCode}
          language={language}
          setLanguage={setLanguage}
          roomId={String(userRoomId)}
        />
        <Terminal output={output} isTeam={false} />
        <div className="text-center">
          <IdeFooter
            code={code}
            language={language}
            setOutput={setOutput}
            userRoomId={userRoomId}
          />
        </div>
      </div>

      <div className="grow min-w-[15rem]">
        <GameUserList
          users={users}
          completeUsers={completeUsers}
          userProgress={userProgress}
          leftUsers={leftUsers}
        />
      </div>

      {/* ‚úÖ ÏÇ¨Ïù¥Îìú Î¨∏Ï†ú Î™®Îã¨ */}
      {showModal && sideProblem && (
        <SideProblemModal
          gameId={gameId}
          roomId={userRoomId}
          problem={sideProblem?.data}
          onClose={() => setShowModal(false)}
        />
      )}
    </div>
  );
};

export default SingleIdePage;
