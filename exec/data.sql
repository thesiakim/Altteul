-- MySQL dump 10.13  Distrib 8.0.30, for Win64 (x86_64)
--
-- Host: 127.0.0.1    Database: altteul
-- ------------------------------------------------------
-- Server version	8.0.27

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Dumping data for table `problem`
--

LOCK TABLES `problem` WRITE;
/*!40000 ALTER TABLE `problem` DISABLE KEYS */;

INSERT INTO `problem` (`point`,`total_count`,`created_at`,`problem_id`,`updated_at`,`description`,`problem_title`) VALUES
                                                                                                                       (50,1,'2025-02-03 19:10:07.000000',1,'2025-02-03 19:10:07.000000','Hello world! 를 그대로 출력하세요.','Hello world!'),
                                                                                                                       (50,5,'2025-02-03 19:10:07.000000',2,'2025-02-03 19:10:07.000000','<p>원탁에 앉은 사람들은 머리를 맞대어 좋은 아이디어를 내야만 합니다.</p><p>서로 인접해있는 사람들끼리 <strong>T개의 팀</strong>을 이루어야 합니다. 아래 이미지는 각자의 두뇌 회전 속도를 나타낸 예시입니다.</p><img src="https://altteul-792301.s3.ap-northeast-2.amazonaws.com/uploads/%EB%A8%B8%EB%A6%AC%EB%A7%9E%EB%8C%80%EA%B8%B0_1.png" alt="머리맞대기_1"><p>함 팀의 역량은 팀원들의 두뇌 회전 속도의 합계로 나타낼 수 있습니다. 만약 아래 그림과 같이 <code>T=3</code>개의 팀을 짜는 경우, <code>370</code>, <code>320</code>, <code>340</code>의 값을 얻을 수 있습니다.</p><p>이 합계를 <strong>Head Sum</strong> 이라고 합니다. 아래와 같이 팀을 구성할 때, Head Sum의 MAX 값은 <code>370</code> 입니다.</p><img src="https://altteul-792301.s3.ap-northeast-2.amazonaws.com/uploads/%EB%A8%B8%EB%A6%AC%EB%A7%9E%EB%8C%80%EA%B8%B0_2.png" alt="머리맞대기_2"><p>만약 아래와 같이 팀을 짠다면, Head Sum의 MAX 값은 <code>360</code> 입니다. Head Sum의 MAX 값이 가장 작은 값이 나오도록 팀을 구성한다면, 이는 팀간의 역량이 가장 균등한 상태라고 간주할 수 있습니다.</p><img src="https://altteul-792301.s3.ap-northeast-2.amazonaws.com/uploads/%EB%A8%B8%EB%A6%AC%EB%A7%9E%EB%8C%80%EA%B8%B0_3.png" alt="머리맞대기_3"><p>최적의 팀을 구성한 후, Head Sum의 MAX 값을 출력해주세요.</p>','머리 맞대기'),
                                                                                                                       (50,7,'2025-02-03 19:10:07.000000',3,'2025-02-03 19:10:07.000000','<p>코코는 한 물류 회사의 개발자이며, 물류 창고의 물품 이동을 간편하게 하기 위한 로봇을 개발하고 있습니다.</p><p>그녀는 프로토타입으로 두 가지 커맨드를 활용하여 이동을 제어할 수 있는 로봇을 완성했습니다.</p><p>로봇의 이동을 제어할 수 있는 커맨드는 다음과 같습니다.</p><ul><li><strong>커맨드 1:</strong> 로봇이 향하고 있는 방향으로 1칸, 2칸, 또는 3칸을 앞으로 움직입니다.</li><li><strong>커맨드 2:</strong> 로봇을 왼쪽 또는 오른쪽으로 90도 회전시킵니다.</li></ul><p>로봇이 향하고 있는 방향은 동(오른쪽), 서(왼쪽), 남(아래쪽), 북(위쪽) 중 하나입니다.</p><p>코코는 테스트겸 로봇을 특정 위치에서 출발하여 목적지까지 최소한의 커맨드로 이동시키려고 합니다.</p><p>코코가 일하는 물류 창고는 N(세로) X M(가로)의 직사각형 구조이며, 로봇으로 지나갈 수 있는 길은 <code>0</code>, 아닌 길은 <code>1</code>로 표현됩니다.</p><p>로봇이 목적지에 도착하면, 손쉽게 물품을 싣고 뺄 수 있도록 방향까지 맞춰주어야 합니다.</p><p>물류 창고의 정보와 로봇의 시작 위치와 방향, 그리고 목적지의 위치와 방향이 주어졌을 때, 최소 몇 번의 커맨드 입력이 필요한지를 구하는 프로그램을 작성하세요.</p><h3>예시 1</h3><p>다음은 예제 입력 1을 시각화한 것입니다.</p><p>(1, 1) 남쪽 방향을 바라보는 위치에서 시작하여 (3, 3) 남쪽 방향으로 도착하기 위해서는 최소 4번의 커맨드 입력이 필요합니다.</p><img src=\"https://altteul-792301.s3.ap-northeast-2.amazonaws.com/uploads/%EB%AC%BC%EB%A5%98%EC%B0%BD%EA%B3%A0%EB%A1%9C%EB%B4%87_1.png\" alt=\"물류창고로봇_1\"><h3>예시 2</h3><p>다음은 예제 입력 2를 시각화한 것입니다.</p><p>(1,1) 남쪽 방향을 바라보는 위치에서 시작하여 (3, 3) 동쪽 방향으로 도착하기 위해서는 최소 3번의 커맨드 입력이 필요합니다.</p><img src=\"https://altteul-792301.s3.ap-northeast-2.amazonaws.com/uploads/%EB%AC%BC%EB%A5%98%EC%B0%BD%EA%B3%A0%EB%A1%9C%EB%B4%87_2.png\" alt=\"물류창고로봇_2\"><h3>예시 3</h3><p>다음은 예제 입력 3을 시각화한 것입니다.</p><p>(2, 4) 서쪽 방향을 바라보는 위치에서 시작하여 (2, 2) 북쪽 방향으로 도착하기 위해서는 최소 6번의 커맨드 입력이 필요합니다.</p><img src=\"https://altteul-792301.s3.ap-northeast-2.amazonaws.com/uploads/%EB%AC%BC%EB%A5%98%EC%B0%BD%EA%B3%A0%EB%A1%9C%EB%B4%87_3.png\" alt=\"물류창고로봇_3\"><h3>입력</h3><pre>첫 번째 줄에 물류 창고의 크기를 나타내는 세로 길이 N과 가로 길이 M이 공백으로 구분되어 주어집니다. (1 <= N, M <= 100)두 번째 줄부터 N개의 줄에 걸쳐 M개의 자연수(0: 로봇이 갈 수 있는 길, 1: 로봇이 갈 수 없는 길)가 공백으로 구분되어 주어집니다.다음 줄에는 로봇의 시작 위치(행, 열)과 향하고 있는 방향이 공백으로 구분되어 주어집니다.마지막 줄에는 도착지의 위치(행, 열)과 향해야 하는 방향이 공백으로 구분되어 주어집니다.방향은 동(오른쪽) : 1, 서(왼쪽) : 2, 남(아래쪽) : 3, 북(위쪽) : 4로 주어집니다.출발지로부터 도착지로까지는 항상 이동 가능한 경로와 위치가 주어집니다.</pre><h3>출력</h3><pre>첫 번째 줄에 로봇을 도착지점에 주어진 방향으로 이동시키기까지 필요한 최소한의 커맨드 입력을 출력합니다.</pre>','물류창고로봇'),
                                                                                                                       (50,10,'2025-02-03 19:10:07.000000',4,'2025-02-03 19:10:07.000000','<p>N x M 크기의 격자 도시에 지하철을 건설하려고 한다.</p><p>모든 지하철은 한 행에서 수평으로 이루어져야 한다.</p><p>즉, 모든 지하철 노선은 [Fig.1]과 같이 <code>(r, c1)</code>에서 출발하여 <code>(r, c2)</code>에 도착한다. (<code>r</code>은 격자 마을의 행 번호를 의미하고, <code>c1</code>은 <code>r</code>행에서 출발하는 열 번호, <code>c2</code>는 <code>r</code>행에서 도착하는 열 번호를 의미한다.)</p><img src="https://altteul-792301.s3.ap-northeast-2.amazonaws.com/uploads/%EA%B2%A9%EC%9E%90%EB%8F%84%EC%8B%9C_1.png" alt="격자도시_1"><p>정부는 <strong>K개의 지하철 노선</strong>을 건설한 후, 지하철이 지나지 않는 격자 구역에 가로등을 설치하려고 한다.</p><p>예를 들어 [Fig.2]와 같이 <code>4x4</code> 격자 도시에 지하철 노선에 대한 정보가 주어졌다고 했을 때, 건설이 완료되면 아래와 같이 색칠된 구역에 지하철이 다니게 된다.</p><p>그리고 격자 도시에서 가로등을 설치할 수 있는 격자 구역은 총 <strong>5개</strong>가 된다.</p><img src="https://altteul-792301.s3.ap-northeast-2.amazonaws.com/uploads/%EA%B2%A9%EC%9E%90%EB%8F%84%EC%8B%9C_2.png" alt="격자도시_2"><p>지하철 건설 계획에 따라 지하철을 모두 건설한 후, 가로등을 설치할 수 있는 격자 구역의 개수를 구하라.</p><h3>입력</h3><pre>첫번째 줄에 격자 도시의 크기 N과 M, 그리고 지하철 노선의 개수 K가 주어진다. (1<=N, M<=1,000,000,000, 0<=K<=1,000)다음 K개의 줄에는 지하철 노선이 건설되는 행 r과 출발 열 c1, 그리고 도착 열 c2가 주어진다. (1<=r<=N, 1<=c1<=c2<=M)</pre><h3>출력</h3><pre>지하철 노선을 전부 건설한 후 가로등을 설치할 수 있는 격자 구역의 개수를 출력한다.정답의 범위는 32-bit Integer를 넘어갈 수 있다는 점에 유의하라.</pre>','격자도시'),
                                                                                                                       (50,5,'2025-02-03 19:10:07.000000',5,'2025-02-03 19:10:07.000000','<p>2차원 평면상에 <strong>m개의 수직선</strong>과 <strong>n개의 수평선</strong>으로 이루어진 격자 형태의 도로망이 있습니다.</p><p>아래 그림은 7개의 수직선과 6개의 수평선으로 이루어진 도로망의 예입니다.</p><img src="https://altteul-792301.s3.ap-northeast-2.amazonaws.com/uploads/%EB%B2%84%EC%8A%A4%ED%99%98%EC%8A%B9_1.png" alt="버스환승_1"><p>수직선과 수평선이 만나는 교차점들 중 가장 왼쪽 아래 점의 위치는 <code>(1, 1)</code>이고, 가장 오른쪽 위 점의 좌표는 <code>(m, n)</code> 입니다.</p><p>이 도로망을 운행하는 <strong>K개</strong>의 버스가 있으며, 각 버스는 하나의 수평선 상의 두 교차점 사이 선분이나 하나의 수직선 상의 두 교차점 사이 선분을 왕복 운행합니다.</p><p>각 버스는 운행하는 선분 사이의 모든 교차점(선분의 양 끝 교차점 포함)에서 정차합니다.</p><p>출발지로부터 목적지가 주어졌을 때, 출발지로부터 목적지까지 갈 수 있는 <strong>최소한의 환승 횟수</strong>를 출력하는 프로그램을 작성하세요.</p><p>처음 탑승하는 버스도 환승 횟수에 포함하며, 출발지와 목적지는 항상 다른 교차점이 주어집니다.</p><h3>예시</h3><p>예를 들어, 8대의 버스가 다음과 같이 운행한다고 할 때, 아래의 그림과 같이 버스 노선을 표현할 수 있습니다.</p><img src="https://altteul-792301.s3.ap-northeast-2.amazonaws.com/uploads/%EB%B2%84%EC%8A%A4%ED%99%98%EC%8A%B9_2.png" alt="버스환승_2"><ul><li>1번 버스 : (2, 1) - (2, 1)</li><li>2번 버스 : (1, 1) - (5, 1)</li><li>3번 버스 : (3, 2) - (6, 2)</li><li>4번 버스 : (5, 6) - (5, 1)</li><li>5번 버스 : (1, 5) - (7, 5)</li><li>6번 버스 : (7, 3) - (7, 6)</li><li>7번 버스 : (2, 1) - (2, 6)</li><li>8번 버스 : (3, 5) - (6, 5)</li></ul><p>출발지가 <code>(2, 1)</code>이고 목적지가 <code>(7, 4)</code>라고 한다면,</p><ol><li>2번 버스를 타고 교차점 <code>(5, 1)</code>에서 하차</li><li>4번 버스를 타고 <code>(5, 5)</code>에서 하차</li><li>5번 버스를 탄 후 <code>(7, 5)</code>에서 하차</li><li>6번 버스를 타서 목적지 <code>(7, 4)</code>에서 하차</li></ol><p>를 하여, <strong>총 4번의 환승</strong>으로 목적지에 도착할 수 있습니다.</p><img src="https://altteul-792301.s3.ap-northeast-2.amazonaws.com/uploads/%EB%B2%84%EC%8A%A4%ED%99%98%EC%8A%B9_3.png" alt="버스환승_3"><h3>입력</h3><pre>첫 번째 줄에 수직선의 수 m과 수평선의 수 n이 빈칸을 사이에 두고 주어집니다. (1 <= m, n < 100,000)두 번째 줄에 버스의 수 K (1 <= K < 5,000)가 주어집니다.세 번째 줄부터 K줄에 걸쳐 각 줄에 버스의 운행 구간을 나타내는 5개의 수 b, x1, y1, x2, y2가 빈칸을 사이에 두고 주어집니다.여기서 b(1 <= b <= K)는 버스의 번호, (x1, y1)과 (x2, y2)는 이 버스가 운행하는 양쪽 끝 교차점의 좌표를 나타냅니다.마지막 줄에 출발지와 목적지 좌표를 나타내는 네 개의 수 sx, sy, dx, dy가 빈칸을 사이에 두고 주어집니다.여기서 (sx, sy)는 출발지 좌표이고 (dx, dy)는 목적지 좌표입니다.1 <= x1, x2, sx, dx <= m, 1 <= y1, y2, sy, dy <= n모든 입력에 대하여, 출발지와 목적지는 다르게 주어지며 출발지에서 목적지로 가는 방법은 한 가지 이상 존재합니다.</pre><h3>출력</h3><pre>첫째 줄에 이용하는 최소 버스 수를 출력합니다.</pre>','버스환승'),
                                                                                                                       (50,10,'2025-02-03 19:10:07.000000',6,'2025-02-03 19:10:07.000000','<p>M 나라와 C 나라는 서로 앙숙 관계입니다. 두 나라는 현재까지 휴전기에 있었습니다.</p><p>어느 날, M 나라는 C 나라가 전쟁을 위해 준비하고 있다는 정보를 입수했습니다.</p><p>C 나라는 전쟁에 필요한 무기, 물자 등을 수도로부터 최전선까지 항상 최단 경로로 이동시킵니다.</p><p>C 나라의 수도는 항상 1번 도시이며, 최전선은 N번 도시입니다.</p><p>M 나라는 이에 대응하여 C 나라에 스파이를 보내 C 나라의 도로 중 하나를 파괴하여 물자를 이동시키는 거리를 최대화시켜 전쟁 준비에 최대한 많은 시간을 소비하게 하려고 합니다.</p><p>C 나라의 도시와 도로 정보가 주어졌을 때, 도로 하나를 파괴하여 수도로부터 최전선까지의 최단 거리가 최대가 되는 거리를 출력하는 프로그램을 작성하세요.</p><p>단, 어떠한 도로를 파괴하더라도 C 나라는 M 나라에 갈 수 있는 경로가 하나 이상 존재합니다.</p><h3>예시</h3><p>다음은 예제 입력을 시각화한 것입니다.</p><img src="https://altteul-792301.s3.ap-northeast-2.amazonaws.com/uploads/MC%EC%A0%84%EC%9F%81_1.png" alt="MC전쟁_1"><p>수도인 1번부터 최전선인 5번까지의 최단 경로는 아래와 같습니다.</p><ul><li>1 → 2 → 4 → 5 = 4 + 4 + 1 = 9</li><li>1 → 3 → 3 → 4 → 5 = 3 + 1 + 4 + 1 = 9</li></ul><img src="https://altteul-792301.s3.ap-northeast-2.amazonaws.com/uploads/MC%EC%A0%84%EC%9F%81_2.png" alt="MC전쟁_2"><p>이 중 도로 하나를 파괴했을 때, 최단 거리가 최대가 되는 경로는 아래와 같습니다.</p><ul><li>1 → 2 → 5 = 4 + 7 = 11</li><li>1 → 3 → 2 → 5 = 3 + 1 + 7 = 11</li></ul><img src="https://altteul-792301.s3.ap-northeast-2.amazonaws.com/uploads/MC%EC%A0%84%EC%9F%81_3.png" alt="MC전쟁_3"><h3>입력</h3><pre>첫 줄에 N과 M이 입력됩니다. N은 정점의 개수이고 M은 도로의 수입니다. (1<=N<=1000, 1<=M<=N*(N-1)/2)다음 줄부터 M개의 줄에 도로의 정보가 입력됩니다.i+1번째 줄에는 i번째 도로의 정보 xi yi zi가 입력되고 이 도로는 정점 xi와 정점 yi를 잇는 도로이며 지나는데 zi만큼의 시간이 걸린다는 것을 의미합니다.두 정점 사이에는 두 개 이상의 길이 존재하지 않고 모든 도로는 양방향이며 한 도로를 파괴하는 것은 양방향의 길 모두를 파괴하는 것입니다. (1<=xi, yi<=N, 1<=zi<=1000)C 나라의 수도는 항상 1번 점에 위치하며, 최전선은 N번 점에 위치합니다.</pre><h3>출력</h3><pre>도로를 하나 파괴했을 때 1번 정점에서 N번 정점으로의 최단 거리의 최댓값을 출력합니다.</pre>','MC전쟁');
/*!40000 ALTER TABLE `problem` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `tier`
--

LOCK TABLES `tier` WRITE;
/*!40000 ALTER TABLE `tier` DISABLE KEYS */;
INSERT INTO `tier` VALUES (199,0,'2025-02-01 03:46:06.000000',1,'BRONZE'),(399,200,'2025-02-01 03:46:06.000000',2,'SILVER'),(599,400,'2025-02-01 03:46:06.000000',3,'GOLD'),(799,600,'2025-02-01 03:46:06.000000',4,'PLATINUM'),(999,800,'2025-02-01 03:46:06.000000',5,'DIAMOND');
/*!40000 ALTER TABLE `tier` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;

INSERT INTO `user` (`created_at`,`last_out_time`,`ranking_point`,`tier_id`,`updated_at`,`user_id`,`nickname`,`username`,`password`,`profile_img`,`main_lang`,`provider`,`user_status`) VALUES
                                                                                                                                                                                           ('2025-02-18 22:48:56.568016',NULL,800,5,'2025-02-18 22:48:56.568016',1,'yujin','yujin','$2a$10$oVQv8CKB4UxH1KarqDoxhu7/QswZNUmIJmUHxxBYYJZ7g4uaxuKDC','uploads/1739886536004_GettyImages-1175550351.jpg','PY','LC','A'),
                                                                                                                                                                                           ('2025-02-18 22:50:06.789345',NULL,390,2,'2025-02-18 22:50:06.789345',2,'wonyoung','wonyoung','$2a$10$Ml8vIDzdf7ghfLxaHbqz4.KYSu.j16pOQSub93GcdUlwwRee1Se8a','uploads/1739886606484_화면 캡처 2025-02-18 222725.png','PY','LC','A'),
                                                                                                                                                                                           ('2025-02-18 22:50:56.854221',NULL,100,1,'2025-02-18 22:50:56.854221',3,'karina','karina','$2a$10$ItFaB8Yv5yvsbV4jz9gn.effzicbL4oRTF6kzuE/bcUvyL8l0ZcF2','uploads/1739886656628_kitty-cat-kitten-pet-45201.jpeg','JV','LC','A'),
                                                                                                                                                                                           ('2025-02-18 22:51:13.351608',NULL,450,3,'2025-02-18 22:51:13.351608',4,'winter','winter','$2a$10$7aPEuEcC2eEl0p8dlsU28u2QPdP.nN8my/sIphM.nbuGjAUXBCtAS','uploads/1739886673106_Untitled-design-35-1080x675.png','JV','LC','A'),
                                                                                                                                                                                           ('2025-02-18 22:51:55.237347',NULL,620,4,'2025-02-18 22:51:55.237347',5,'minji','minji','$2a$10$eoyZd/6lo4sxFpa8VQsZFeSvwJahE5rhknW18lEjOrQBLYepIRdfO','uploads/1739886715011_european-shorthair-8601492_640.jpg','JV','LC','A'),
                                                                                                                                                                                           ('2025-02-18 22:52:31.277137',NULL,860,5,'2025-02-18 22:52:31.277137',6,'hanni','hanni','$2a$10$iqrQ5p4u0J/jWh15KI1OpeKzokldUOdXzRxz1xnZXKMcCLnn/tGqy','uploads/1739886750845_download.png','JV','LC','A'),
                                                                                                                                                                                           ('2025-02-18 22:53:00.113326',NULL,220,2,'2025-02-18 22:53:00.113326',7,'danielle','danielle','$2a$10$mgXq69gFC3jkWsNXRO3fSexAj4cOZ3yugWTfPo/51pgCUB9o.3FxC','uploads/1739886779899_ai-generative-cute-cat-isolated-on-solid-background-photo.jpg','PY','LC','A'),
                                                                                                                                                                                           ('2025-02-18 22:53:21.165910',NULL,650,4,'2025-02-18 22:53:21.165910',8,'haerin','haerin','$2a$10$es3ZaxciP9kCrkEJXrASbeCDPuMIX5w0QrK1NYTTw8EDyu.YadkqO','uploads/1739886800938_223809003-cute-ginger-cat-in-stylish-sunglasses-and-bandana-on-yellow-background.jpg','PY','LC','A'),
                                                                                                                                                                                           ('2025-02-18 22:53:44.550930',NULL,220,2,'2025-02-18 22:53:44.550930',9,'hyein','hyein','$2a$10$JW39SxPHeFxR3sryamh4p.gqjjIMnZfHH6Z7KbQHVvolSQYoyqnoK','uploads/1739886824346_F2_shutterstock_474493482_2.jpg','PY','LC','A'),
                                                                                                                                                                                           ('2025-02-18 22:54:38.266374',NULL,1010,5,'2025-02-18 22:54:38.266374',10,'natty','natty','$2a$10$nhjbnv9RbzmZmQbMqLnmEur//CWRq4Pkt7GDgF2x9s2f/zWeObucS','uploads/1739886877935_cuteanimal01.jpg','PY','LC','A'),
                                                                                                                                                                                           ('2025-02-18 23:08:28.636664',NULL,720,4,'2025-02-18 23:08:28.636664',11,'macaron','macaron','$2a$10$8P7oZRVfsxHzibvQccd6IuNY2aysuSUE3EiJLp2wQkdDl.V24WMlm','uploads/1739887708331_happy-puppy-dog-corgi-SYDPORT1218-b32a3888db1040db801c46450f9c02ff.jpg','PY','LC','A'),
                                                                                                                                                                                           ('2025-02-18 23:08:46.311444',NULL,770,4,'2025-02-18 23:08:46.311444',12,'lemon','lemon','$2a$10$reS9OdGwrKJnRRx5EJX.UOZYqa.TbBwjzWTxDlHrguieRSl4mUJKO','uploads/1739887726000_30078352_448703938920062_6275637137232625664_n-5b0de8c443a1030036f9e15e.jpg','JV','LC','A'),
                                                                                                                                                                                           ('2025-02-18 23:09:49.580416',NULL,120,1,'2025-02-18 23:09:49.580416',13,'cookie','cookie','$2a$10$VECBYQB6S983N5kpiu03d.QABxEcmemNwN12nRnioepWISDCZSWDa','uploads/1739887789245_young-rabbit-1.jpg','JV','LC','A'),
                                                                                                                                                                                           ('2025-02-18 23:10:11.734205',NULL,450,3,'2025-02-18 23:10:11.734205',14,'yellow','yellow','$2a$10$hVHfJVLcRx9CcnlCtCE5Z.UpjK2C90mtGXOOTGH04C/fKK/aAnnwG','uploads/1739887811358_top-ten-cutest-japanese-wild-animals.jpg','JV','LC','A'),
                                                                                                                                                                                           ('2025-02-18 23:10:58.769911',NULL,500,3,'2025-02-18 23:10:58.769911',15,'tabby','tabby','$2a$10$qiDIeO2f1L9jxUPNzFtBvO6fHwM8oRmGIy5S5j4u5D5utqN3nOnpi','uploads/1739887858394_download2.png','PY','LC','A'),
                                                                                                                                                                                           ('2025-02-20 11:59:18.709607',NULL,200,2,'2025-02-20 12:07:27.981051',16,'mememe','mememe','$2a$10$GBw8NfFXmWl9quOn1yplCORZzTZ8eGYsHPWO6i05qjpXJjqrJS2fK','uploads/1740020358220_cat.jpg','PY','LC','A'),
                                                                                                                                                                                           ('2025-02-20 12:00:53.004830',NULL,150,1,'2025-02-20 12:06:56.661472',17,'momomo','momomo','$2a$10$xGlp6sVasXeexVtVrk/sneVJLmb4M2aXixpLl703DihCrCGmSNiUm','uploads/1740020452752_ae9bc63eadbbde6aa89af4155b434f63_t.jpeg','PY','LC','A');


/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;


--
-- Dumping data for table `game`
--

LOCK TABLES `game` WRITE;
/*!40000 ALTER TABLE `game` DISABLE KEYS */;

INSERT INTO `game` (`completed_at`,`created_at`,`game_id`,`problem_id`,`battle_type`) VALUES
                                                                                          ('2025-02-19 11:10.22.354640','2025-02-19 10:40:38.924640',1,1,'S'),
                                                                                          ('2025-02-19 14:30:22.876542','2025-02-19 13:45:51.876542',2,4,'S'),
                                                                                          ('2025-02-19 16:30:11.881474','2025-02-19 15:52:45.881474',3,3,'S'),
                                                                                          ('2025-02-19 18:15:45.881474','2025-02-19 17:10:45.881474',4,6,'S'),
                                                                                          ('2025-02-19 20:25:45.881474','2025-02-19 19:23:45.881474',5,1,'S'),
                                                                                          ('2025-02-19 21:57:45.881474','2025-02-19 21:23:45.881474',6,3,'S'),
                                                                                          ('2025-02-19 23:28:46.868010','2025-02-19 22:50:46.868010',7,4,'S'),
                                                                                          ('2025-02-19 12:55:18.869576','2025-02-19 12:05:18.869576',8,5,'S'),
                                                                                          ('2025-02-19 13:59:00.864734','2025-02-19 13:22:00.864734',9,6,'S'),
                                                                                          ('2025-02-19 14:21:50.866018','2025-02-19 13:39:50.866018',10,3,'S'),
                                                                                          ('2025-02-20 10:30:25.356391','2025-02-20 10:29:07.342486',11,6,'T'),
                                                                                          ('2025-02-20 10:36:26.043748','2025-02-20 10:35:58.332749',12,6,'T'),
                                                                                          ('2025-02-20 10:38:19.390902','2025-02-20 10:38:07.314497',13,4,'T'),
                                                                                          ('2025-02-20 10:42:26.634005','2025-02-20 10:42:10.323489',14,3,'T'),
                                                                                          ('2025-02-20 10:45:32.137942','2025-02-20 10:45:21.325984',15,2,'T'),
                                                                                          ('2025-02-20 10:48:35.807251','2025-02-20 10:47:54.325491',16,1,'T'),
                                                                                          ('2025-02-20 10:51:18.270690','2025-02-20 10:51:10.326750',17,6,'T'),
                                                                                          ('2025-02-20 10:59:33.319888','2025-02-20 10:52:33.319888',18,6,'S'),
                                                                                          ('2025-02-20 11:50:52.666959','2025-02-20 11:50:46.398313',19,5,'T'),
                                                                                          ('2025-02-20 11:54:49.414666','2025-02-20 11:54:30.388379',20,4,'T'),
                                                                                          (NULL,'2025-02-20 11:56:44.403042',21,3,'T'),
                                                                                          (NULL,'2025-02-20 12:06:00.393364',22,5,'S');


/*!40000 ALTER TABLE `game` ENABLE KEYS */;
UNLOCK TABLES;


--
-- Dumping data for table `chatroom`
--

LOCK TABLES `chatroom` WRITE;
/*!40000 ALTER TABLE `chatroom` DISABLE KEYS */;

INSERT INTO `chatroom` (`chatroom_id`,`created_at`) VALUES
                                                        (1,'2025-02-20 10:40:38.924640'),
                                                        (2,'2025-02-20 10:48:38.924640');

/*!40000 ALTER TABLE `chatroom` ENABLE KEYS */;
UNLOCK TABLES;


--
-- Dumping data for table `user_chat_room`
--

LOCK TABLES `user_chat_room` WRITE;
/*!40000 ALTER TABLE `user_chat_room` DISABLE KEYS */;

INSERT INTO `user_chat_room` (`chatroom_chatroom_id`,`created_at`,`user_chatroom_id`,`user_user_id`) VALUES
                                                                                                         (1,'2025-02-20 10:40:38.924640',1,1),
                                                                                                         (1,'2025-02-20 10:40:39.924640',2,2),
                                                                                                         (2,'2025-02-20 10:48:38.924640',3,2),
                                                                                                         (2,'2025-02-20 10:48:39.924640',4,3);

/*!40000 ALTER TABLE `user_chat_room` ENABLE KEYS */;
UNLOCK TABLES;


--
-- Dumping data for table `chat_message`
--

LOCK TABLES `chat_message` WRITE;
/*!40000 ALTER TABLE `chat_message` DISABLE KEYS */;

INSERT INTO `chat_message` (`checked`,`chat_message_id`,`chatroom_chatroom_id`,`created_at`,`sender_user_id`,`updated_at`,`message_content`) VALUES
                                                                                                                                                 (1,1,1,'2025-02-20 10:40:38.924640',1,'2025-02-20 10:40:38.924640','뭐해?'),
                                                                                                                                                 (1,2,1,'2025-02-20 10:41:38.924640',2,'2025-02-20 10:41:38.924640','랭킹 확인 중'),
                                                                                                                                                 (1,3,1,'2025-02-20 10:42:38.924640',1,'2025-02-20 10:42:38.924640','할거 없으면 같이 게임할래?'),
                                                                                                                                                 (1,4,1,'2025-02-20 10:43:38.924640',2,'2025-02-20 10:43:38.924640','ㅇㅋ'),
                                                                                                                                                 (1,5,2,'2025-02-20 10:48:38.924640',2,'2025-02-20 10:48:38.924640','안녕하세요~'),
                                                                                                                                                 (1,6,2,'2025-02-20 10:49:38.924640',3,'2025-02-20 10:49:38.924640','네 안녕하세요ㅎㅎ'),
                                                                                                                                                 (1,7,2,'2025-02-20 10:50:38.924640',2,'2025-02-20 10:50:38.924640','괜찮으시면 이따 제 친구랑 같이 팀전하실래요? '),
                                                                                                                                                 (1,8,2,'2025-02-20 10:51:38.924640',3,'2025-02-20 10:51:38.924640','저 초보라 그렇게 잘하진 않는데ㅠㅠ'),
                                                                                                                                                 (1,9,2,'2025-02-20 10:52:38.924640',2,'2025-02-20 10:52:38.924640','저도 실버라 초보예요 ㄱㅊㄱㅊ'),
                                                                                                                                                 (1,10,2,'2025-02-20 10:53:53.924640',3,'2025-02-20 10:53:53.924640','그럼 이따 게임하실때 초대해주세요!'),
                                                                                                                                                 (1,11,2,'2025-02-20 10:55:38.924640',2,'2025-02-20 10:55:38.924640','넹 잠시만요');

/*!40000 ALTER TABLE `chat_message` ENABLE KEYS */;
UNLOCK TABLES;



--
-- Dumping data for table `friend_request`
--

LOCK TABLES `friend_request` WRITE;
/*!40000 ALTER TABLE `friend_request` DISABLE KEYS */;
INSERT INTO `friend_request` VALUES ('2025-02-09 10:58:37.000000',1,5,1,'2025-02-09 10:58:37.000000','P'),
                                    ('2025-02-09 10:59:49.000000',2,1,2,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',3,1,3,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',4,1,4,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',5,2,3,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',6,6,4,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',7,6,10,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',8,5,4,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',9,5,15,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',10,7,15,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',11,7,4,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',12,7,10,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',13,8,5,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',14,8,11,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',15,9,11,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',16,10,8,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',17,10,13,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',18,11,9,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',19,11,13,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',20,12,13,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',21,12,1,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',22,13,14,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',23,13,9,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',24,14,11,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',25,14,3,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',26,15,6,'2025-02-09 10:59:49.000000','A'),
                                    ('2025-02-09 10:59:49.000000',27,15,8,'2025-02-09 10:59:49.000000','A');

/*!40000 ALTER TABLE `friend_request` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `friendship`
--

LOCK TABLES `friendship` WRITE;
/*!40000 ALTER TABLE `friendship` DISABLE KEYS */;

INSERT INTO `friendship` VALUES ('2025-02-09 10:57:41.000000',1,2),
                                ('2025-02-09 10:57:41.000000',1,3),
                                ('2025-02-09 10:57:41.000000',1,4),
                                ('2025-02-09 10:57:41.000000',2,1),
                                ('2025-02-09 10:57:41.000000',2,3),
                                ('2025-02-09 10:57:41.000000',3,1),
                                ('2025-02-09 10:57:41.000000',3,2),
                                ('2025-02-09 10:57:41.000000',4,1),
                                ('2025-02-09 10:57:41.000000',4,6),
                                ('2025-02-09 10:57:41.000000',6,4),
                                ('2025-02-09 10:57:41.000000',6,10),
                                ('2025-02-09 10:57:41.000000',10,6),
                                ('2025-02-09 10:57:41.000000',5,4),
                                ('2025-02-09 10:57:41.000000',4,5),
                                ('2025-02-09 10:57:41.000000',5,15),
                                ('2025-02-09 10:57:41.000000',15,5),
                                ('2025-02-09 10:57:41.000000',7,15),
                                ('2025-02-09 10:57:41.000000',15,7),
                                ('2025-02-09 10:57:41.000000',7,4),
                                ('2025-02-09 10:57:41.000000',4,7),
                                ('2025-02-09 10:57:41.000000',7,10),
                                ('2025-02-09 10:57:41.000000',10,7),
                                ('2025-02-09 10:57:41.000000',8,5),
                                ('2025-02-09 10:57:41.000000',5,8),
                                ('2025-02-09 10:57:41.000000',8,11),
                                ('2025-02-09 10:57:41.000000',11,8),
                                ('2025-02-09 10:57:41.000000',11,9),
                                ('2025-02-09 10:57:41.000000',9,11),
                                ('2025-02-09 10:57:41.000000',10,8),
                                ('2025-02-09 10:57:41.000000',8,10),
                                ('2025-02-09 10:57:41.000000',13,10),
                                ('2025-02-09 10:57:41.000000',10,13),
                                ('2025-02-09 10:57:41.000000',11,13),
                                ('2025-02-09 10:57:41.000000',13,11),
                                ('2025-02-09 10:57:41.000000',13,12),
                                ('2025-02-09 10:57:41.000000',12,13),
                                ('2025-02-09 10:57:41.000000',12,1),
                                ('2025-02-09 10:57:41.000000',1,12),
                                ('2025-02-09 10:57:41.000000',13,14),
                                ('2025-02-09 10:57:41.000000',14,13),
                                ('2025-02-09 10:57:41.000000',9,13),
                                ('2025-02-09 10:57:41.000000',13,9),
                                ('2025-02-09 10:57:41.000000',14,11),
                                ('2025-02-09 10:57:41.000000',11,14),
                                ('2025-02-09 10:57:41.000000',3,14),
                                ('2025-02-09 10:57:41.000000',14,3),
                                ('2025-02-09 10:57:41.000000',15,6),
                                ('2025-02-09 10:57:41.000000',6,15),
                                ('2025-02-09 10:57:41.000000',8,15),
                                ('2025-02-09 10:57:41.000000',15,8);

/*!40000 ALTER TABLE `friendship` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `item`
--

LOCK TABLES `item` WRITE;
/*!40000 ALTER TABLE `item` DISABLE KEYS */;
INSERT INTO `item` VALUES ('2025-02-09 11:01:56.000000',1,'ITEM1','ITEM1'),
                          ('2025-02-09 11:02:21.000000',2,'ITEM2','ITEM2'),
                          ('2025-02-09 11:02:31.000000',3,'ITEM3','ITEM3'),
                          ('2025-02-09 11:02:42.000000',4,'ITEM4','ITEM4'),
                          ('2025-02-09 11:02:52.000000',5,'ITEM5','ITEM5');

/*!40000 ALTER TABLE `item` ENABLE KEYS */;
UNLOCK TABLES;


--
-- Dumping data for table `lang_limit`
--

LOCK TABLES `lang_limit` WRITE;
/*!40000 ALTER TABLE `lang_limit` DISABLE KEYS */;
/*!40000 ALTER TABLE `lang_limit` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `single_room`
--

LOCK TABLES `single_room` WRITE;
/*!40000 ALTER TABLE `single_room` DISABLE KEYS */;

INSERT INTO `single_room` (`activation`,`matching_order`,`reward_point`,`solved_testcase_count`,`created_at`,`finish_time`,`game_id`,`single_room_id`,`user_id`,`code`,`last_execute_memory`,`last_execute_time`,`battle_result`,`lang`) VALUES
                                                                                                                                                                                                                                             (0,0,150,1,'2025-02-19 10:40:45.334264','2025-02-19 10:41:38.984839',1,1,1,'print(\"Hello World!\")','8015872','8','FIRST','PY'),
                                                                                                                                                                                                                                             (0,1,100,1,'2025-02-19 10:40:57.788134','2025-02-19 10:41:48.989159',1,2,2,'print(\"Hello World!\")','7991296','7','SECOND','PY'),
                                                                                                                                                                                                                                             (0,2,100,1,'2025-02-19 10:41:33.882669','2025-02-19 10:42:38.992898',1,3,5,'print(\"Hello World!\")','7823360','7','FIFTH','PY'),
                                                                                                                                                                                                                                             (0,3,100,1,'2025-02-19 10:41:12.241797','2025-02-19 10:42:50.994961',1,4,3,'print(\"Hello World!\")','7950336','0','THIRD','PY'),
                                                                                                                                                                                                                                             (0,4,100,1,'2025-02-19 10:41:18.488706','2025-02-19 10:42:50.996496',1,5,4,'print(\"Hello World!\")','7856128','3','FOURTH','PY'),
                                                                                                                                                                                                                                             (0,0,100,10,'2025-02-19 10:45:51.885491','2025-02-19 11:38:28.160110',2,6,1,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8593408','12','SECOND','PY'),
                                                                                                                                                                                                                                             (0,1,150,10,'2025-02-19 10:45:51.887034','2025-02-19 11:33:06.037707',2,7,2,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8572928','11','FIRST','PY'),
                                                                                                                                                                                                                                             (1,2,0,NULL,'2025-02-19 10:45:51.888589',NULL,2,8,3,NULL,NULL,NULL,NULL,NULL),
                                                                                                                                                                                                                                             (1,3,0,NULL,'2025-02-19 10:45:51.889641',NULL,2,9,4,NULL,NULL,NULL,NULL,NULL),
                                                                                                                                                                                                                                             (0,4,100,10,'2025-02-19 10:45:51.891191','2025-02-19 11:30:56.079543',2,10,5,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8540160','11','THIRD','PY'),
                                                                                                                                                                                                                                             (0,0,150,7,'2025-02-19 10:52:45.889017','2025-02-19 12:10:08.428088',3,11,6,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10510336','21','FIRST','PY'),
                                                                                                                                                                                                                                             (0,1,100,7,'2025-02-19 10:52:45.890574','2025-02-19 12:32:29.275499',3,12,8,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10588160','31','THIRD','PY'),
                                                                                                                                                                                                                                             (0,2,0,0,'2025-02-19 10:52:45.891609','2025-02-19 11:52:59.927921',3,13,7,'print(\"Hello World!\")','8007680','10','FAIL','PY'),
                                                                                                                                                                                                                                             (1,3,0,NULL,'2025-02-19 10:52:45.892428',NULL,3,14,9,NULL,NULL,NULL,NULL,NULL),
                                                                                                                                                                                                                                             (0,4,100,7,'2025-02-19 10:52:45.893526','2025-02-19 11:49:45.650407',3,15,10,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10543104','38','SECOND','PY'),
                                                                                                                                                                                                                                             (0,0,150,10,'2025-02-19 11:18:10.882570','2025-02-19 12:11:36.856490',4,16,6,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84062208','1129','FIRST','PY'),
                                                                                                                                                                                                                                             (0,1,100,10,'2025-02-19 11:18:10.883609','2025-02-19 11:59:29.241659',4,17,10,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 2)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','83951616','1079','SECOND','PY'),
                                                                                                                                                                                                                                             (0,0,150,1,'2025-02-19 11:24:59.891397','2025-02-19 11:25:27.495603',5,18,8,'print(\"Hello World!\")','7970816','7','FIRST','PY'),
                                                                                                                                                                                                                                             (0,1,120,1,'2025-02-19 11:24:59.892467','2025-02-19 11:25:19.377887',5,19,9,'print(\"Hello World!\")','7856128','0','THIRD','PY'),
                                                                                                                                                                                                                                             (0,2,100,1,'2025-02-19 11:24:59.894145','2025-02-19 11:25:07.490010',5,20,10,'print(\"Hello World!\")','7876608','6','SECOND','PY'),
                                                                                                                                                                                                                                             (0,0,170,7,'2025-02-19 11:37:27.868503','2025-02-19 12:42:12.280364',6,21,10,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10592256','30','FIRST','PY'),
                                                                                                                                                                                                                                             (0,1,120,7,'2025-02-19 11:37:27.869526','2025-02-19 12:23:26.423620',6,22,6,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10514432','32','SECOND','PY'),
                                                                                                                                                                                                                                             (0,0,120,10,'2025-02-19 11:50:46.873241','2025-02-19 12:59:38.029988',7,23,7,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8585216','12','SECOND','PY'),
                                                                                                                                                                                                                                             (0,1,150,10,'2025-02-19 11:50:46.874292','2025-02-19 12:30:34.138281',7,24,1,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 2:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8540160','12','FIRST','PY'),
                                                                                                                                                                                                                                             (1,2,0,NULL,'2025-02-19 11:50:46.875342',NULL,7,25,10,NULL,NULL,NULL,NULL,NULL),
                                                                                                                                                                                                                                             (1,0,0,NULL,'2025-02-19 12:05:18.875729','2025-02-19 12:59:46.820241',8,26,10,NULL,NULL,NULL,'FAIL',NULL),
                                                                                                                                                                                                                                             (0,1,0,NULL,'2025-02-19 12:05:18.876755','2025-02-19 12:59:56.992139',8,27,1,NULL,NULL,NULL,'FAIL',NULL),
                                                                                                                                                                                                                                             (0,2,0,NULL,'2025-02-19 12:05:18.877776','2025-02-19 12:59:49.581461',8,28,15,NULL,NULL,NULL,'FAIL',NULL),
                                                                                                                                                                                                                                             (0,0,170,10,'2025-02-19 13:22:00.872032','2025-02-19 14:59:51.546612',9,29,10,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84004864','1141','FIRST','PY'),
                                                                                                                                                                                                                                             (0,1,120,10,'2025-02-19 13:22:00.873180','2025-02-19 13:54:30.039622',9,30,11,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84099072','1104','SECOND','PY'),
                                                                                                                                                                                                                                             (0,2,120,10,'2025-02-19 13:22:00.874247','2025-02-19 14:10:08.225411',9,31,12,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84205568','1190','THIRD','PY'),
                                                                                                                                                                                                                                             (0,3,120,10,'2025-02-19 13:22:00.875303','2025-02-19 14:15:20.851832',9,32,13,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84226048','1215','FOURTH','PY'),
                                                                                                                                                                                                                                             (0,4,100,10,'2025-02-19 13:22:00.876265','2025-02-19 14:35:34.576626',9,33,14,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84004864','1139','FIFTH','PY'),
                                                                                                                                                                                                                                             (1,5,0,NULL,'2025-02-19 13:22:00.877299',NULL,9,34,15,NULL,NULL,NULL,NULL,NULL),
                                                                                                                                                                                                                                             (1,0,150,7,'2025-02-19 13:39:50.873217','2025-02-19 14:30:34.074714',10,35,1,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10584064','30','FIRST','PY'),
                                                                                                                                                                                                                                             (0,1,120,7,'2025-02-19 13:39:50.874826','2025-02-19 14:36:20.928690',10,36,10,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10522624','33','SECOND','PY'),
                                                                                                                                                                                                                                             (0,2,140,7,'2025-02-19 13:39:50.875344','2025-02-19 14:42:37.495907',10,37,2,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10592256','31','FOURTH','PY'),
                                                                                                                                                                                                                                             (0,3,140,7,'2025-02-19 13:39:50.876389','2025-02-19 14:50:29.747543',10,38,6,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10592256','25','THIRD','PY'),
                                                                                                                                                                                                                                             (0,4,120,7,'2025-02-19 13:39:50.877436','2025-02-19 14:59:44.110057',10,39,5,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10543104','31','FIFTH','PY'),
                                                                                                                                                                                                                                             (0,0,150,10,'2025-02-20 10:52:33.326276','2025-02-20 11:59:45.150587',18,40,15,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84209664','1109','FIRST','PY'),
                                                                                                                                                                                                                                             (0,1,100,10,'2025-02-20 10:52:33.328118','2025-02-20 11:33:54.346906',18,41,14,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84062208','1154','SECOND','PY'),
                                                                                                                                                                                                                                             (0,0,150,5,'2025-02-20 12:06:00.400783','2025-02-20 12:40:56.634757',22,42,17,'from collections import deque, defaultdict\r\n\r\ndef bfs(start_buses, target_buses, bus_connections):\r\n    queue = deque()\r\n    visited = set()\r\n\r\n    for bus in start_buses:\r\n        queue.append((bus, 1))\r\n        visited.add(bus)\r\n\r\n    while queue:\r\n        bus, transfers = queue.popleft()\r\n\r\n        if bus in target_buses:\r\n            return transfers\r\n\r\n        for next_bus in bus_connections[bus]:\r\n            if next_bus not in visited:\r\n                visited.add(next_bus)\r\n                queue.append((next_bus, transfers + 1))\r\n\r\n    return -1\r\n\r\ndef find_min_transfers():\r\n    m, n = map(int, input().split())\r\n    k = int(input())\r\n\r\n    bus_graph = defaultdict(set)\r\n\r\n    station_to_buses = defaultdict(set)\r\n\r\n    for _ in range(k):\r\n        bus_id, x1, y1, x2, y2 = map(int, input().split())\r\n\r\n        if x1 == x2:\r\n            for y in range(min(y1, y2), max(y1, y2) + 1):\r\n                bus_graph[bus_id].add((x1, y))\r\n                station_to_buses[(x1, y)].add(bus_id)\r\n        else:\r\n            for x in range(min(x1, x2), max(x1, x2) + 1):\r\n                bus_graph[bus_id].add((x, y1))\r\n                station_to_buses[(x, y1)].add(bus_id)\r\n\r\n    sx, sy, dx, dy = map(int, input().split())\r\n    start_buses = station_to_buses.get((sx, sy), set())\r\n    target_buses = station_to_buses.get((dx, dy), set())\r\n\r\n    if not start_buses or not target_buses:\r\n        print(-1)\r\n        return\r\n\r\n    bus_connections = defaultdict(set)\r\n\r\n    for station, buses in station_to_buses.items():\r\n        bus_list = list(buses)\r\n        for i in range(len(bus_list)):\r\n            for j in range(i + 1, len(bus_list)):\r\n                bus_connections[bus_list[i]].add(bus_list[j])\r\n                bus_connections[bus_list[j]].add(bus_list[i])\r\n\r\n    print(bfs(start_buses, target_buses, bus_connections))\r\n\r\nfind_min_transfers()','111628288','362','FIRST','PY'),
                                                                                                                                                                                                                                             (0,1,200,5,'2025-02-20 12:06:00.401844','2025-02-20 12:49:27.952280',22,43,16,'from collections import deque, defaultdict\r\n\r\ndef bfs(start_buses, target_buses, bus_connections):\r\n    queue = deque()\r\n    visited = set()\r\n\r\n    for bus in start_buses:\r\n        queue.append((bus, 1))\r\n        visited.add(bus)\r\n\r\n    while queue:\r\n        bus, transfers = queue.popleft()\r\n\r\n        if bus in target_buses:\r\n            return transfers\r\n\r\n        for next_bus in bus_connections[bus]:\r\n            if next_bus not in visited:\r\n                visited.add(next_bus)\r\n                queue.append((next_bus, transfers + 1))\r\n\r\n    return -1\r\n\r\ndef find_min_transfers():\r\n    m, n = map(int, input().split())\r\n    k = int(input())\r\n\r\n    bus_graph = defaultdict(set)\r\n\r\n    station_to_buses = defaultdict(set)\r\n\r\n    for _ in range(k):\r\n        bus_id, x1, y1, x2, y2 = map(int, input().split())\r\n\r\n        if x1 == x2:\r\n            for y in range(min(y1, y2), max(y1, y2) + 1):\r\n                bus_graph[bus_id].add((x1, y))\r\n                station_to_buses[(x1, y)].add(bus_id)\r\n        else:\r\n            for x in range(min(x1, x2), max(x1, x2) + 1):\r\n                bus_graph[bus_id].add((x, y1))\r\n                station_to_buses[(x, y1)].add(bus_id)\r\n\r\n    sx, sy, dx, dy = map(int, input().split())\r\n    start_buses = station_to_buses.get((sx, sy), set())\r\n    target_buses = station_to_buses.get((dx, dy), set())\r\n\r\n    if not start_buses or not target_buses:\r\n        print(-1)\r\n        return\r\n\r\n    bus_connections = defaultdict(set)\r\n\r\n    for station, buses in station_to_buses.items():\r\n        bus_list = list(buses)\r\n        for i in range(len(bus_list)):\r\n            for j in range(i + 1, len(bus_list)):\r\n                bus_connections[bus_list[i]].add(bus_list[j])\r\n                bus_connections[bus_list[j]].add(bus_list[i])\r\n\r\n    print(bfs(start_buses, target_buses, bus_connections))\r\n\r\nfind_min_transfers()','111742976','320','THIRD','PY');



/*!40000 ALTER TABLE `single_room` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `team_room`
--

LOCK TABLES `team_room` WRITE;
/*!40000 ALTER TABLE `team_room` DISABLE KEYS */;

INSERT INTO `team_room` (`activation`,`reward_point`,`solved_testcase_count`,`created_at`,`finish_time`,`game_id`,`team_room_id`,`code`,`last_execute_memory`,`last_execute_time`,`battle_result`,`lang`) VALUES
                                                                                                                                                                                                              (1,0,NULL,'2025-02-20 10:29:07.371877',NULL,11,1,NULL,NULL,NULL,NULL,NULL),
                                                                                                                                                                                                              (0,250,10,'2025-02-20 10:29:07.407022','2025-02-20 11:43:25.356391',11,2,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84144128','1101','THIRD','PY'),
                                                                                                                                                                                                              (0,150,10,'2025-02-20 10:35:58.334321','2025-02-20 11:49:13.037146',12,3,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84189184','1206','FIRST','PY'),
                                                                                                                                                                                                              (0,100,10,'2025-02-20 10:35:58.345089','2025-02-20 11:50:26.043748',12,4,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84189184','1143','THIRD','PY'),
                                                                                                                                                                                                              (0,100,10,'2025-02-20 10:38:07.316092','2025-02-20 11:34:19.390902',13,5,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8667136','14','THIRD','PY'),
                                                                                                                                                                                                              (0,150,10,'2025-02-20 10:38:07.324610','2025-02-20 11:39:12.207792',13,6,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8593408','11','FIRST','PY'),
                                                                                                                                                                                                              (0,150,7,'2025-02-20 10:42:10.324561','2025-02-20 11:59:20.687398',14,7,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10600448','30','FIRST','PY'),
                                                                                                                                                                                                              (0,100,7,'2025-02-20 10:42:10.336152','2025-02-20 12:00:26.634005',14,8,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10809344','31','THIRD','PY'),
                                                                                                                                                                                                              (0,100,5,'2025-02-20 10:45:21.327024','2025-02-20 12:01:32.137942',15,9,'def min_max_head_sum(N, T, brain_speeds):\r\n    extended_speeds = brain_speeds * 2\r\n\r\n    def is_possible(max_sum):\r\n        for start in range(N):  \r\n            count = 1  \r\n            current_sum = 0  \r\n            for i in range(start, start + N):  \r\n                if current_sum + extended_speeds[i] > max_sum:\r\n                    count += 1  \r\n                    current_sum = 0\r\n                current_sum += extended_speeds[i]\r\n\r\n                if count > T:\r\n                    break  \r\n\r\n            if count <= T:\r\n                return True  \r\n\r\n        return False  \r\n\r\n    low, high = max(brain_speeds), sum(brain_speeds)\r\n    result = high  \r\n\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if is_possible(mid):\r\n            result = mid\r\n            high = mid - 1  \r\n        else:\r\n            low = mid + 1  \r\n\r\n    return result\r\n\r\nN, T = map(int, input().split())\r\nbrain_speeds = list(map(int, input().split()))\r\n\r\nprint(min_max_head_sum(N, T, brain_speeds))','8593408','8','FOURTH','PY'),
                                                                                                                                                                                                              (0,150,5,'2025-02-20 10:45:21.336516','2025-02-20 12:10:25.563927',15,10,'def min_max_head_sum(N, T, brain_speeds):\r\n    extended_speeds = brain_speeds * 2\r\n\r\n    def is_possible(max_sum):\r\n        for start in range(N):  \r\n            count = 1  \r\n            current_sum = 0  \r\n            for i in range(start, start + N):  \r\n                if current_sum + extended_speeds[i] > max_sum:\r\n                    count += 1  \r\n                    current_sum = 0\r\n                current_sum += extended_speeds[i]\r\n\r\n                if count > T:\r\n                    break  \r\n\r\n            if count <= T:\r\n                return True  \r\n\r\n        return False  \r\n\r\n    low, high = max(brain_speeds), sum(brain_speeds)\r\n    result = high  \r\n\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if is_possible(mid):\r\n            result = mid\r\n            high = mid - 1  \r\n        else:\r\n            low = mid + 1  \r\n\r\n    return result\r\n\r\nN, T = map(int, input().split())\r\nbrain_speeds = list(map(int, input().split()))\r\n\r\nprint(min_max_head_sum(N, T, brain_speeds))','8433664','8','FIRST','PY'),
                                                                                                                                                                                                              (0,100,1,'2025-02-20 10:47:54.326535','2025-02-20 10:49:35.807251',16,11,'print(\"Hello World!\")','7925760','7','FOURTH','PY'),
                                                                                                                                                                                                              (0,150,1,'2025-02-20 10:47:54.336023','2025-02-20 10:49:12.798001',16,12,'print(\'Hello World!\')','7929856','7','FIRST','PY'),
                                                                                                                                                                                                              (0,100,10,'2025-02-20 10:51:10.328096','2025-02-20 11:38:18.270690',17,13,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84193280','1188','THIRD','PY'),
                                                                                                                                                                                                              (0,150,10,'2025-02-20 10:51:10.335009','2025-02-20 11:57:14.766474',17,14,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84189184','1172','FIRST','PY'),
                                                                                                                                                                                                              (1,0,NULL,'2025-02-20 11:50:46.401539',NULL,19,15,NULL,NULL,NULL,NULL,NULL),
                                                                                                                                                                                                              (0,150,5,'2025-02-20 11:50:46.419171','2025-02-20 12:36:52.666959',19,16,'from collections import deque, defaultdict\r\n\r\ndef bfs(start_buses, target_buses, bus_connections):\r\n    queue = deque()\r\n    visited = set()\r\n\r\n    for bus in start_buses:\r\n        queue.append((bus, 1))\r\n        visited.add(bus)\r\n\r\n    while queue:\r\n        bus, transfers = queue.popleft()\r\n\r\n        if bus in target_buses:\r\n            return transfers\r\n\r\n        for next_bus in bus_connections[bus]:\r\n            if next_bus not in visited:\r\n                visited.add(next_bus)\r\n                queue.append((next_bus, transfers + 1))\r\n\r\n    return -1\r\n\r\ndef find_min_transfers():\r\n    m, n = map(int, input().split())\r\n    k = int(input())\r\n\r\n    bus_graph = defaultdict(set)\r\n\r\n    station_to_buses = defaultdict(set)\r\n\r\n    for _ in range(k):\r\n        bus_id, x1, y1, x2, y2 = map(int, input().split())\r\n\r\n        if x1 == x2:\r\n            for y in range(min(y1, y2), max(y1, y2) + 1):\r\n                bus_graph[bus_id].add((x1, y))\r\n                station_to_buses[(x1, y)].add(bus_id)\r\n        else:\r\n            for x in range(min(x1, x2), max(x1, x2) + 1):\r\n                bus_graph[bus_id].add((x, y1))\r\n                station_to_buses[(x, y1)].add(bus_id)\r\n\r\n    sx, sy, dx, dy = map(int, input().split())\r\n    start_buses = station_to_buses.get((sx, sy), set())\r\n    target_buses = station_to_buses.get((dx, dy), set())\r\n\r\n    if not start_buses or not target_buses:\r\n        print(-1)\r\n        return\r\n\r\n    bus_connections = defaultdict(set)\r\n\r\n    for station, buses in station_to_buses.items():\r\n        bus_list = list(buses)\r\n        for i in range(len(bus_list)):\r\n            for j in range(i + 1, len(bus_list)):\r\n                bus_connections[bus_list[i]].add(bus_list[j])\r\n                bus_connections[bus_list[j]].add(bus_list[i])\r\n\r\n    print(bfs(start_buses, target_buses, bus_connections))\r\n\r\nfind_min_transfers()','111837184','393','FIRST','PY'),
                                                                                                                                                                                                              (0,100,10,'2025-02-20 11:54:30.390539','2025-02-20 12:38:49.414666',20,17,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8589312','11','THIRD','PY'),
                                                                                                                                                                                                              (0,150,10,'2025-02-20 11:54:30.403348','2025-02-20 12:43:40.509625',20,18,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8585216','12','FIRST','PY'),
                                                                                                                                                                                                              (1,0,1,'2025-02-20 11:56:44.405017',NULL,21,19,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (1, -1),  \r\n    3: (1, 3),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10588160','29',NULL,'PY'),
                                                                                                                                                                                                              (1,0,0,'2025-02-20 11:56:44.413472',NULL,21,20,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 1),   \r\n    4: (-1, 3)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10780672','32',NULL,'PY');



/*!40000 ALTER TABLE `team_room` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `test_history`
--

LOCK TABLES `test_history` WRITE;
/*!40000 ALTER TABLE `test_history` DISABLE KEYS */;

INSERT INTO `test_history` (`fail_count`,`success_count`,`created_at`,`game_id`,`problem_id`,`test_history_id`,`user_id`,`code`,`execute_memory`,`execute_time`,`result`) VALUES
                                                                                                                                                                              (0,1,'2025-02-19 10:40:45.423971',1,1,1,1,'print(\"Hello World!\")','8015872','8','P'),
                                                                                                                                                                              (0,1,'2025-02-19 10:40:57.815052',1,1,2,2,'print(\"Hello World!\")','7991296','7','P'),
                                                                                                                                                                              (0,1,'2025-02-19 10:41:12.269809',1,1,3,3,'print(\"Hello World!\")','7950336','0','P'),
                                                                                                                                                                              (0,1,'2025-02-19 10:41:18.513774',1,1,4,4,'print(\"Hello World!\")','7856128','3','P'),
                                                                                                                                                                              (0,1,'2025-02-19 10:41:33.913346',1,1,5,5,'print(\"Hello World!\")','7823360','7','P'),
                                                                                                                                                                              (0,10,'2025-02-19 10:46:06.082767',2,4,6,2,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8572928','11','P'),
                                                                                                                                                                              (0,10,'2025-02-19 10:46:28.202897',2,4,7,1,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8593408','12','P'),
                                                                                                                                                                              (0,10,'2025-02-19 10:46:56.111530',2,4,8,5,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8540160','11','P'),
                                                                                                                                                                              (2,5,'2025-02-19 10:53:22.273859',3,3,9,6,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 1)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10469376','25','F'),
                                                                                                                                                                              (7,0,'2025-02-19 10:54:13.543325',3,3,10,7,'print(\"Hello World!\")','8007680','10','F'),
                                                                                                                                                                              (2,5,'2025-02-19 11:14:58.262387',3,3,11,6,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 1)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10600448','23','F'),
                                                                                                                                                                              (0,7,'2025-02-19 11:15:08.459672',3,3,12,6,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10510336','21','P'),
                                                                                                                                                                              (7,0,'2025-02-19 11:15:38.033455',3,3,13,10,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 1)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10514432','34','F'),
                                                                                                                                                                              (0,7,'2025-02-19 11:15:45.673934',3,3,14,10,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10543104','38','P'),
                                                                                                                                                                              (4,3,'2025-02-19 11:16:21.092783',3,3,15,8,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 2)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10534912','32','F'),
                                                                                                                                                                              (0,7,'2025-02-19 11:16:29.297774',3,3,16,8,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10588160','31','P'),
                                                                                                                                                                              (0,10,'2025-02-19 11:18:36.900935',4,6,17,6,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84062208','1129','P'),
                                                                                                                                                                              (0,10,'2025-02-19 11:19:29.283268',4,6,18,10,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 2)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','83951616','1079','P'),
                                                                                                                                                                              (0,1,'2025-02-19 11:34:27.536493',5,1,19,8,'print(\"Hello World!\")','7970816','7','P'),
                                                                                                                                                                              (0,1,'2025-02-19 11:36:07.513694',5,1,20,10,'print(\"Hello World!\")','7876608','6','P'),
                                                                                                                                                                              (0,1,'2025-02-19 11:36:19.403624',5,1,21,9,'print(\"Hello World!\")','7856128','0','P'),
                                                                                                                                                                              (2,5,'2025-02-19 11:38:44.667997',6,3,22,6,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 1)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10518528','32','F'),
                                                                                                                                                                              (5,2,'2025-02-19 11:39:33.379934',6,3,23,10,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 0),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10571776','26','F'),
                                                                                                                                                                              (4,3,'2025-02-19 11:40:09.057254',6,3,24,6,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 2)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10543104','32','F'),
                                                                                                                                                                              (0,7,'2025-02-19 11:48:12.321338',6,3,25,10,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10592256','30','P'),
                                                                                                                                                                              (0,7,'2025-02-19 11:48:26.458105',6,3,26,6,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10514432','32','P'),
                                                                                                                                                                              (10,0,'2025-02-19 11:52:11.919062',7,4,27,1,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 1\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8552448','12','F'),
                                                                                                                                                                              (0,10,'2025-02-19 11:52:34.181070',7,4,28,1,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 2:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8540160','12','P'),
                                                                                                                                                                              (0,10,'2025-02-19 12:01:38.060089',7,4,29,7,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8585216','12','P'),
                                                                                                                                                                              (0,10,'2025-02-19 13:33:51.604570',9,6,32,10,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84004864','1141','P'),
                                                                                                                                                                              (0,10,'2025-02-19 13:34:30.072324',9,6,33,11,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84099072','1104','P'),
                                                                                                                                                                              (0,10,'2025-02-19 13:35:08.271111',9,6,34,12,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84205568','1190','P'),
                                                                                                                                                                              (0,10,'2025-02-19 13:35:20.885201',9,6,35,13,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84226048','1215','P'),
                                                                                                                                                                              (0,10,'2025-02-19 13:35:34.605382',9,6,36,14,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84004864','1139','P'),
                                                                                                                                                                              (5,2,'2025-02-19 13:51:34.531746',10,3,37,1,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, 1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10559488','26','F'),
                                                                                                                                                                              (6,1,'2025-02-19 13:52:20.690825',10,3,38,1,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 1),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10596352','39','F'),
                                                                                                                                                                              (0,7,'2025-02-19 13:52:34.102263',10,3,39,1,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10584064','30','P'),
                                                                                                                                                                              (0,7,'2025-02-19 13:55:20.953121',10,3,40,10,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10522624','33','P'),
                                                                                                                                                                              (0,7,'2025-02-19 14:01:29.783911',10,3,41,6,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10592256','25','P'),
                                                                                                                                                                              (0,7,'2025-02-19 14:01:37.529716',10,3,42,2,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10592256','31','P'),
                                                                                                                                                                              (0,7,'2025-02-19 14:01:44.134965',10,3,43,5,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10543104','31','P'),
                                                                                                                                                                              (0,10,'2025-02-20 10:30:10.389865',11,6,44,1,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84144128','1101','P'),
                                                                                                                                                                              (0,10,'2025-02-20 10:30:25.420175',11,6,45,10,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84217856','1170','P'),
                                                                                                                                                                              (0,10,'2025-02-20 10:36:13.088311',12,6,46,6,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84189184','1206','P'),
                                                                                                                                                                              (0,10,'2025-02-20 10:36:26.098303',12,6,47,11,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84189184','1143','P'),
                                                                                                                                                                              (0,10,'2025-02-20 10:38:12.249788',13,4,48,6,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8593408','11','P'),
                                                                                                                                                                              (0,10,'2025-02-20 10:38:19.422803',13,4,49,8,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8667136','14','P'),
                                                                                                                                                                              (0,7,'2025-02-20 10:42:20.749472',14,3,50,4,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10600448','30','P'),
                                                                                                                                                                              (0,7,'2025-02-20 10:42:26.670345',14,3,51,11,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 0),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10809344','31','P'),
                                                                                                                                                                              (0,5,'2025-02-20 10:45:25.618297',15,2,52,5,'def min_max_head_sum(N, T, brain_speeds):\r\n    extended_speeds = brain_speeds * 2\r\n\r\n    def is_possible(max_sum):\r\n        for start in range(N):  \r\n            count = 1  \r\n            current_sum = 0  \r\n            for i in range(start, start + N):  \r\n                if current_sum + extended_speeds[i] > max_sum:\r\n                    count += 1  \r\n                    current_sum = 0\r\n                current_sum += extended_speeds[i]\r\n\r\n                if count > T:\r\n                    break  \r\n\r\n            if count <= T:\r\n                return True  \r\n\r\n        return False  \r\n\r\n    low, high = max(brain_speeds), sum(brain_speeds)\r\n    result = high  \r\n\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if is_possible(mid):\r\n            result = mid\r\n            high = mid - 1  \r\n        else:\r\n            low = mid + 1  \r\n\r\n    return result\r\n\r\nN, T = map(int, input().split())\r\nbrain_speeds = list(map(int, input().split()))\r\n\r\nprint(min_max_head_sum(N, T, brain_speeds))','8433664','8','P'),
                                                                                                                                                                              (0,5,'2025-02-20 10:45:32.167138',15,2,53,4,'def min_max_head_sum(N, T, brain_speeds):\r\n    extended_speeds = brain_speeds * 2\r\n\r\n    def is_possible(max_sum):\r\n        for start in range(N):  \r\n            count = 1  \r\n            current_sum = 0  \r\n            for i in range(start, start + N):  \r\n                if current_sum + extended_speeds[i] > max_sum:\r\n                    count += 1  \r\n                    current_sum = 0\r\n                current_sum += extended_speeds[i]\r\n\r\n                if count > T:\r\n                    break  \r\n\r\n            if count <= T:\r\n                return True  \r\n\r\n        return False  \r\n\r\n    low, high = max(brain_speeds), sum(brain_speeds)\r\n    result = high  \r\n\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if is_possible(mid):\r\n            result = mid\r\n            high = mid - 1  \r\n        else:\r\n            low = mid + 1  \r\n\r\n    return result\r\n\r\nN, T = map(int, input().split())\r\nbrain_speeds = list(map(int, input().split()))\r\n\r\nprint(min_max_head_sum(N, T, brain_speeds))','8593408','8','P'),
                                                                                                                                                                              (0,1,'2025-02-20 10:48:12.858059',16,1,54,11,'print(\'Hello World!\')','7929856','7','P'),
                                                                                                                                                                              (0,1,'2025-02-20 10:48:35.852068',16,1,55,4,'print(\"Hello World!\")','7925760','7','P'),
                                                                                                                                                                              (0,10,'2025-02-20 10:51:14.801659',17,6,56,15,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84189184','1172','P'),
                                                                                                                                                                              (0,10,'2025-02-20 10:51:18.319989',17,6,57,7,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84193280','1188','P'),
                                                                                                                                                                              (0,10,'2025-02-20 10:52:45.180979',18,6,58,15,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84209664','1109','P'),
                                                                                                                                                                              (0,10,'2025-02-20 10:52:54.389646',18,6,59,14,'import heapq\r\nfrom collections import defaultdict\r\n\r\ndef dijkstra(n, graph, start):\r\n    INF = float(\'inf\')\r\n    dist = [INF] * (n + 1)\r\n    dist[start] = 0\r\n    pq = [(0, start)] \r\n\r\n    while pq:\r\n        current_dist, node = heapq.heappop(pq)\r\n\r\n        if current_dist > dist[node]:\r\n            continue\r\n\r\n        for neighbor, weight in graph[node]:\r\n            new_dist = current_dist + weight\r\n            if new_dist < dist[neighbor]:\r\n                dist[neighbor] = new_dist\r\n                heapq.heappush(pq, (new_dist, neighbor))\r\n\r\n    return dist\r\n\r\ndef find_max_shortest_path():\r\n    N, M = map(int, input().split())\r\n\r\n    graph = defaultdict(list)\r\n    edges = []\r\n\r\n    for _ in range(M):\r\n        x, y, z = map(int, input().split())\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n        edges.append((x, y, z))  \r\n\r\n    dist_from_start = dijkstra(N, graph, 1)\r\n    original_shortest_path = dist_from_start[N]\r\n\r\n    dist_from_end = dijkstra(N, graph, N)\r\n\r\n    shortest_path_edges = []\r\n\r\n    for x, y, z in edges:\r\n        if dist_from_start[x] + z + dist_from_end[y] == original_shortest_path or \\\r\n                dist_from_start[y] + z + dist_from_end[x] == original_shortest_path:\r\n            shortest_path_edges.append((x, y, z))\r\n\r\n    max_shortest_path = original_shortest_path\r\n\r\n    for x, y, z in shortest_path_edges:\r\n        graph[x].remove((y, z))\r\n        graph[y].remove((x, z))\r\n\r\n        new_shortest_path = dijkstra(N, graph, 1)[N]  \r\n\r\n        if new_shortest_path != float(\'inf\'): \r\n            max_shortest_path = max(max_shortest_path, new_shortest_path)\r\n\r\n        graph[x].append((y, z))\r\n        graph[y].append((x, z))\r\n\r\n    print(max_shortest_path)\r\n\r\nfind_max_shortest_path()','84062208','1154','P'),
                                                                                                                                                                              (0,5,'2025-02-20 11:50:52.844360',19,5,60,2,'from collections import deque, defaultdict\r\n\r\ndef bfs(start_buses, target_buses, bus_connections):\r\n    queue = deque()\r\n    visited = set()\r\n\r\n    for bus in start_buses:\r\n        queue.append((bus, 1))\r\n        visited.add(bus)\r\n\r\n    while queue:\r\n        bus, transfers = queue.popleft()\r\n\r\n        if bus in target_buses:\r\n            return transfers\r\n\r\n        for next_bus in bus_connections[bus]:\r\n            if next_bus not in visited:\r\n                visited.add(next_bus)\r\n                queue.append((next_bus, transfers + 1))\r\n\r\n    return -1\r\n\r\ndef find_min_transfers():\r\n    m, n = map(int, input().split())\r\n    k = int(input())\r\n\r\n    bus_graph = defaultdict(set)\r\n\r\n    station_to_buses = defaultdict(set)\r\n\r\n    for _ in range(k):\r\n        bus_id, x1, y1, x2, y2 = map(int, input().split())\r\n\r\n        if x1 == x2:\r\n            for y in range(min(y1, y2), max(y1, y2) + 1):\r\n                bus_graph[bus_id].add((x1, y))\r\n                station_to_buses[(x1, y)].add(bus_id)\r\n        else:\r\n            for x in range(min(x1, x2), max(x1, x2) + 1):\r\n                bus_graph[bus_id].add((x, y1))\r\n                station_to_buses[(x, y1)].add(bus_id)\r\n\r\n    sx, sy, dx, dy = map(int, input().split())\r\n    start_buses = station_to_buses.get((sx, sy), set())\r\n    target_buses = station_to_buses.get((dx, dy), set())\r\n\r\n    if not start_buses or not target_buses:\r\n        print(-1)\r\n        return\r\n\r\n    bus_connections = defaultdict(set)\r\n\r\n    for station, buses in station_to_buses.items():\r\n        bus_list = list(buses)\r\n        for i in range(len(bus_list)):\r\n            for j in range(i + 1, len(bus_list)):\r\n                bus_connections[bus_list[i]].add(bus_list[j])\r\n                bus_connections[bus_list[j]].add(bus_list[i])\r\n\r\n    print(bfs(start_buses, target_buses, bus_connections))\r\n\r\nfind_min_transfers()','111837184','393','P'),
                                                                                                                                                                              (0,10,'2025-02-20 11:54:40.565112',20,4,61,3,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8585216','12','P'),
                                                                                                                                                                              (0,10,'2025-02-20 11:54:49.460247',20,4,62,2,'def count_street_lamps():\r\n    N, M, K = map(int, input().split())\r\n\r\n    subway_map = {}\r\n\r\n    for _ in range(K):\r\n        r, c1, c2 = map(int, input().split())\r\n\r\n        if r not in subway_map:\r\n            subway_map[r] = []\r\n        subway_map[r].append((c1, c2))\r\n\r\n    occupied_count = 0\r\n\r\n    for row in subway_map:\r\n        intervals = sorted(subway_map[row])\r\n        merged_intervals = []\r\n\r\n        start, end = intervals[0]\r\n        for i in range(1, len(intervals)):\r\n            c1, c2 = intervals[i]\r\n            if c1 <= end + 1:\r\n                end = max(end, c2)\r\n            else:\r\n                merged_intervals.append((start, end))\r\n                start, end = c1, c2\r\n        merged_intervals.append((start, end))\r\n\r\n        for s, e in merged_intervals:\r\n            occupied_count += (e - s + 1)\r\n\r\n    total_cells = N * M\r\n    street_lamps = total_cells - occupied_count\r\n\r\n    print(street_lamps)\r\n\r\ncount_street_lamps()','8589312','11','P'),
                                                                                                                                                                              (7,0,'2025-02-20 11:57:04.430235',21,3,63,2,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (0, -1),  \r\n    3: (1, 1),   \r\n    4: (-1, 3)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10780672','32','F'),
                                                                                                                                                                              (6,1,'2025-02-20 11:57:14.392567',21,3,64,15,'from collections import deque\r\n\r\nDIRECTION_MAP = {\r\n    1: (0, 1),   \r\n    2: (1, -1),  \r\n    3: (1, 3),   \r\n    4: (-1, 0)   \r\n}\r\n\r\ndef bfs(N, M, warehouse, start, goal):\r\n    sr, sc, sd = start\r\n    gr, gc, gd = goal\r\n\r\n    visited = [[[False] * 5 for _ in range(M)] for _ in range(N)]\r\n    queue = deque([(sr-1, sc-1, sd, 0)]) \r\n\r\n    visited[sr-1][sc-1][sd] = True\r\n\r\n    while queue:\r\n        r, c, d, commands = queue.popleft()\r\n\r\n        if (r, c, d) == (gr-1, gc-1, gd):\r\n            return commands\r\n\r\n        dr, dc = DIRECTION_MAP[d]\r\n        for i in range(1, 4):\r\n            nr, nc = r + dr * i, c + dc * i\r\n\r\n            if not (0 <= nr < N and 0 <= nc < M):\r\n                break\r\n\r\n            if warehouse[nr][nc] == 1:\r\n                break\r\n\r\n            if not visited[nr][nc][d]:\r\n                visited[nr][nc][d] = True\r\n                queue.append((nr, nc, d, commands + 1))\r\n\r\n        left_direction = {1: 4, 2: 3, 3: 1, 4: 2}[d]\r\n        if not visited[r][c][left_direction]:\r\n            visited[r][c][left_direction] = True\r\n            queue.append((r, c, left_direction, commands + 1))\r\n\r\n        right_direction = {1: 3, 2: 4, 3: 2, 4: 1}[d]\r\n        if not visited[r][c][right_direction]:\r\n            visited[r][c][right_direction] = True\r\n            queue.append((r, c, right_direction, commands + 1))\r\n\r\n    return -1  \r\n\r\n\r\nN, M = map(int, input().split()) \r\n\r\nwarehouse = []\r\nfor _ in range(N):\r\n    warehouse.append(list(map(int, input().split())))\r\n\r\nsr, sc, sd = map(int, input().split())\r\ngr, gc, gd = map(int, input().split())\r\nprint(bfs(N, M, warehouse, (sr, sc, sd), (gr, gc, gd)))','10588160','29','F'),
                                                                                                                                                                              (5,0,'2025-02-20 12:06:10.892118',22,5,65,17,'print(\"Hello World!\")','8151040','8','F'),
                                                                                                                                                                              (5,0,'2025-02-20 12:06:14.763737',22,5,66,16,'print(\"Hello World!\")','8151040','7','F'),
                                                                                                                                                                              (3,2,'2025-02-20 12:06:33.228833',22,5,67,16,'from collections import deque, defaultdict\r\n\r\ndef bfs(start_buses, target_buses, bus_connections):\r\n    queue = deque()\r\n    visited = set()\r\n\r\n    for bus in start_buses:\r\n        queue.append((bus, 1))\r\n        visited.add(bus)\r\n\r\n    while queue:\r\n        bus, transfers = queue.popleft()\r\n\r\n        if bus in target_buses:\r\n            return transfers\r\n\r\n        for next_bus in bus_connections[bus]:\r\n            if next_bus not in visited:\r\n                visited.add(next_bus)\r\n                queue.append((next_bus, transfers + 1))\r\n\r\n    return -1\r\n\r\ndef find_min_transfers():\r\n    m, n = map(int, input().split())\r\n    k = int(input())\r\n\r\n    bus_graph = defaultdict(set)\r\n\r\n    station_to_buses = defaultdict(set)\r\n\r\n    for _ in range(k):\r\n        bus_id, x1, y1, x2, y2 = map(int, input().split())\r\n\r\n        if x1 == x2:\r\n            for y in range(min(y1, y2), max(y1, y2)):\r\n                bus_graph[bus_id].add((x1, y))\r\n                station_to_buses[(x1, y)].add(bus_id)\r\n        else:\r\n            for x in range(min(x1, x2), max(x1, x2) + 1):\r\n                bus_graph[bus_id].add((x, y1))\r\n                station_to_buses[(x, y1)].add(bus_id)\r\n\r\n    sx, sy, dx, dy = map(int, input().split())\r\n    start_buses = station_to_buses.get((sx, sy), set())\r\n    target_buses = station_to_buses.get((dx, dy), set())\r\n\r\n    if not start_buses or not target_buses:\r\n        print(-1)\r\n        return\r\n\r\n    bus_connections = defaultdict(set)\r\n\r\n    for station, buses in station_to_buses.items():\r\n        bus_list = list(buses)\r\n        for i in range(len(bus_list)):\r\n            for j in range(i + 1, len(bus_list)):\r\n                bus_connections[bus_list[i]].add(bus_list[j])\r\n                bus_connections[bus_list[j]].add(bus_list[i])\r\n\r\n    print(bfs(start_buses, target_buses, bus_connections))\r\n\r\nfind_min_transfers()','110637056','328','F'),
                                                                                                                                                                              (4,1,'2025-02-20 12:06:51.775561',22,5,68,17,'from collections import deque, defaultdict\r\n\r\ndef bfs(start_buses, target_buses, bus_connections):\r\n    queue = deque()\r\n    visited = set()\r\n\r\n    for bus in start_buses:\r\n        queue.append((bus, 1))\r\n        visited.add(bus)\r\n\r\n    while queue:\r\n        bus, transfers = queue.popleft()\r\n\r\n        if bus in target_buses:\r\n            return transfers\r\n\r\n        for next_bus in bus_connections[bus]:\r\n            if next_bus not in visited:\r\n                visited.add(next_bus)\r\n                queue.append((next_bus, transfers + 1))\r\n\r\n    return -1\r\n\r\ndef find_min_transfers():\r\n    m, n = map(int, input().split())\r\n    k = int(input())\r\n\r\n    bus_graph = defaultdict(set)\r\n\r\n    station_to_buses = defaultdict(set)\r\n\r\n    for _ in range(k):\r\n        bus_id, x1, y1, x2, y2 = map(int, input().split())\r\n\r\n        if x1 == x2:\r\n            for y in range(min(y1, y2), max(y1, y2)):\r\n                bus_graph[bus_id].add((x1, y))\r\n                station_to_buses[(x1, y)].add(bus_id)\r\n        else:\r\n            for x in range(min(x1, x2), max(x1, x2)):\r\n                bus_graph[bus_id].add((x, y1))\r\n                station_to_buses[(x, y1)].add(bus_id)\r\n\r\n    sx, sy, dx, dy = map(int, input().split())\r\n    start_buses = station_to_buses.get((sx, sy), set())\r\n    target_buses = station_to_buses.get((dx, dy), set())\r\n\r\n    if not start_buses or not target_buses:\r\n        print(-1)\r\n        return\r\n\r\n    bus_connections = defaultdict(set)\r\n\r\n    for station, buses in station_to_buses.items():\r\n        bus_list = list(buses)\r\n        for i in range(len(bus_list)):\r\n            for j in range(i + 1, len(bus_list)):\r\n                bus_connections[bus_list[i]].add(bus_list[j])\r\n                bus_connections[bus_list[j]].add(bus_list[i])\r\n\r\n    print(bfs(start_buses, target_buses, bus_connections))\r\n\r\nfind_min_transfers()','108818432','275','F'),
                                                                                                                                                                              (0,5,'2025-02-20 12:06:56.671012',22,5,69,17,'from collections import deque, defaultdict\r\n\r\ndef bfs(start_buses, target_buses, bus_connections):\r\n    queue = deque()\r\n    visited = set()\r\n\r\n    for bus in start_buses:\r\n        queue.append((bus, 1))\r\n        visited.add(bus)\r\n\r\n    while queue:\r\n        bus, transfers = queue.popleft()\r\n\r\n        if bus in target_buses:\r\n            return transfers\r\n\r\n        for next_bus in bus_connections[bus]:\r\n            if next_bus not in visited:\r\n                visited.add(next_bus)\r\n                queue.append((next_bus, transfers + 1))\r\n\r\n    return -1\r\n\r\ndef find_min_transfers():\r\n    m, n = map(int, input().split())\r\n    k = int(input())\r\n\r\n    bus_graph = defaultdict(set)\r\n\r\n    station_to_buses = defaultdict(set)\r\n\r\n    for _ in range(k):\r\n        bus_id, x1, y1, x2, y2 = map(int, input().split())\r\n\r\n        if x1 == x2:\r\n            for y in range(min(y1, y2), max(y1, y2) + 1):\r\n                bus_graph[bus_id].add((x1, y))\r\n                station_to_buses[(x1, y)].add(bus_id)\r\n        else:\r\n            for x in range(min(x1, x2), max(x1, x2) + 1):\r\n                bus_graph[bus_id].add((x, y1))\r\n                station_to_buses[(x, y1)].add(bus_id)\r\n\r\n    sx, sy, dx, dy = map(int, input().split())\r\n    start_buses = station_to_buses.get((sx, sy), set())\r\n    target_buses = station_to_buses.get((dx, dy), set())\r\n\r\n    if not start_buses or not target_buses:\r\n        print(-1)\r\n        return\r\n\r\n    bus_connections = defaultdict(set)\r\n\r\n    for station, buses in station_to_buses.items():\r\n        bus_list = list(buses)\r\n        for i in range(len(bus_list)):\r\n            for j in range(i + 1, len(bus_list)):\r\n                bus_connections[bus_list[i]].add(bus_list[j])\r\n                bus_connections[bus_list[j]].add(bus_list[i])\r\n\r\n    print(bfs(start_buses, target_buses, bus_connections))\r\n\r\nfind_min_transfers()','111628288','362','P'),
                                                                                                                                                                              (0,5,'2025-02-20 12:07:05.030676',22,5,70,16,'from collections import deque, defaultdict\r\n\r\ndef bfs(start_buses, target_buses, bus_connections):\r\n    queue = deque()\r\n    visited = set()\r\n\r\n    for bus in start_buses:\r\n        queue.append((bus, 1))\r\n        visited.add(bus)\r\n\r\n    while queue:\r\n        bus, transfers = queue.popleft()\r\n\r\n        if bus in target_buses:\r\n            return transfers\r\n\r\n        for next_bus in bus_connections[bus]:\r\n            if next_bus not in visited:\r\n                visited.add(next_bus)\r\n                queue.append((next_bus, transfers + 1))\r\n\r\n    return -1\r\n\r\ndef find_min_transfers():\r\n    m, n = map(int, input().split())\r\n    k = int(input())\r\n\r\n    bus_graph = defaultdict(set)\r\n\r\n    station_to_buses = defaultdict(set)\r\n\r\n    for _ in range(k):\r\n        bus_id, x1, y1, x2, y2 = map(int, input().split())\r\n\r\n        if x1 == x2:\r\n            for y in range(min(y1, y2), max(y1, y2) + 1):\r\n                bus_graph[bus_id].add((x1, y))\r\n                station_to_buses[(x1, y)].add(bus_id)\r\n        else:\r\n            for x in range(min(x1, x2), max(x1, x2) + 1):\r\n                bus_graph[bus_id].add((x, y1))\r\n                station_to_buses[(x, y1)].add(bus_id)\r\n\r\n    sx, sy, dx, dy = map(int, input().split())\r\n    start_buses = station_to_buses.get((sx, sy), set())\r\n    target_buses = station_to_buses.get((dx, dy), set())\r\n\r\n    if not start_buses or not target_buses:\r\n        print(-1)\r\n        return\r\n\r\n    bus_connections = defaultdict(set)\r\n\r\n    for station, buses in station_to_buses.items():\r\n        bus_list = list(buses)\r\n        for i in range(len(bus_list)):\r\n            for j in range(i + 1, len(bus_list)):\r\n                bus_connections[bus_list[i]].add(bus_list[j])\r\n                bus_connections[bus_list[j]].add(bus_list[i])\r\n\r\n    print(bfs(start_buses, target_buses, bus_connections))\r\n\r\nfind_min_transfers()','111742976','320','P'),
                                                                                                                                                                              (0,5,'2025-02-20 12:07:27.987898',22,5,71,16,'from collections import deque, defaultdict\r\n\r\ndef bfs(start_buses, target_buses, bus_connections):\r\n    queue = deque()\r\n    visited = set()\r\n\r\n    for bus in start_buses:\r\n        queue.append((bus, 1))\r\n        visited.add(bus)\r\n\r\n    while queue:\r\n        bus, transfers = queue.popleft()\r\n\r\n        if bus in target_buses:\r\n            return transfers\r\n\r\n        for next_bus in bus_connections[bus]:\r\n            if next_bus not in visited:\r\n                visited.add(next_bus)\r\n                queue.append((next_bus, transfers + 1))\r\n\r\n    return -1\r\n\r\ndef find_min_transfers():\r\n    m, n = map(int, input().split())\r\n    k = int(input())\r\n\r\n    bus_graph = defaultdict(set)\r\n\r\n    station_to_buses = defaultdict(set)\r\n\r\n    for _ in range(k):\r\n        bus_id, x1, y1, x2, y2 = map(int, input().split())\r\n\r\n        if x1 == x2:\r\n            for y in range(min(y1, y2), max(y1, y2) + 1):\r\n                bus_graph[bus_id].add((x1, y))\r\n                station_to_buses[(x1, y)].add(bus_id)\r\n        else:\r\n            for x in range(min(x1, x2), max(x1, x2) + 1):\r\n                bus_graph[bus_id].add((x, y1))\r\n                station_to_buses[(x, y1)].add(bus_id)\r\n\r\n    sx, sy, dx, dy = map(int, input().split())\r\n    start_buses = station_to_buses.get((sx, sy), set())\r\n    target_buses = station_to_buses.get((dx, dy), set())\r\n\r\n    if not start_buses or not target_buses:\r\n        print(-1)\r\n        return\r\n\r\n    bus_connections = defaultdict(set)\r\n\r\n    for station, buses in station_to_buses.items():\r\n        bus_list = list(buses)\r\n        for i in range(len(bus_list)):\r\n            for j in range(i + 1, len(bus_list)):\r\n                bus_connections[bus_list[i]].add(bus_list[j])\r\n                bus_connections[bus_list[j]].add(bus_list[i])\r\n\r\n    print(bfs(start_buses, target_buses, bus_connections))\r\n\r\nfind_min_transfers()','111824896','294','P');


/*!40000 ALTER TABLE `test_history` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `test_result`
--

LOCK TABLES `test_result` WRITE;
/*!40000 ALTER TABLE `test_result` DISABLE KEYS */;

INSERT INTO `test_result` (`execute_memory`,`execute_time`,`created_at`,`test_history_id`,`test_result_id`,`user_output`,`test_result`) VALUES
                                                                                                                                            (8015872,8,'2025-02-19 10:40:45.427644',1,1,'Hello World!\n','P'),
                                                                                                                                            (7991296,7,'2025-02-19 10:40:57.818085',2,2,'Hello World!\n','P'),
                                                                                                                                            (7950336,0,'2025-02-19 10:41:12.272551',3,3,'Hello World!\n','P'),
                                                                                                                                            (7856128,3,'2025-02-19 10:41:18.517252',4,4,'Hello World!\n','P'),
                                                                                                                                            (7823360,7,'2025-02-19 10:41:33.914911',5,5,'Hello World!\n','P'),
                                                                                                                                            (8380416,4,'2025-02-19 10:46:06.084494',6,6,'2\n','P'),
                                                                                                                                            (8302592,6,'2025-02-19 10:46:06.086075',6,7,'11\n','P'),
                                                                                                                                            (8572928,11,'2025-02-19 10:46:06.087126',6,8,'343959391703854850\n','P'),
                                                                                                                                            (8568832,0,'2025-02-19 10:46:06.088421',6,9,'411903339261164011\n','P'),
                                                                                                                                            (8568832,11,'2025-02-19 10:46:06.090001',6,10,'380943886166622720\n','P'),
                                                                                                                                            (8302592,8,'2025-02-19 10:46:06.091037',6,11,'12\n','P'),
                                                                                                                                            (8343552,10,'2025-02-19 10:46:06.092073',6,12,'563860737173235856\n','P'),
                                                                                                                                            (8351744,11,'2025-02-19 10:46:06.093105',6,13,'81617112085997465\n','P'),
                                                                                                                                            (8437760,10,'2025-02-19 10:46:06.094142',6,14,'34699729330557983\n','P'),
                                                                                                                                            (8294400,10,'2025-02-19 10:46:06.095226',6,15,'636975049358227002\n','P'),
                                                                                                                                            (8298496,9,'2025-02-19 10:46:28.205607',7,16,'2\n','P'),
                                                                                                                                            (8376320,9,'2025-02-19 10:46:28.207194',7,17,'11\n','P'),
                                                                                                                                            (8552448,12,'2025-02-19 10:46:28.209308',7,18,'343959391703854850\n','P'),
                                                                                                                                            (8593408,12,'2025-02-19 10:46:28.210878',7,19,'411903339261164011\n','P'),
                                                                                                                                            (8458240,5,'2025-02-19 10:46:28.212594',7,20,'380943886166622720\n','P'),
                                                                                                                                            (8335360,8,'2025-02-19 10:46:28.214403',7,21,'12\n','P'),
                                                                                                                                            (8376320,0,'2025-02-19 10:46:28.215959',7,22,'563860737173235856\n','P'),
                                                                                                                                            (8409088,10,'2025-02-19 10:46:28.216993',7,23,'81617112085997465\n','P'),
                                                                                                                                            (8519680,10,'2025-02-19 10:46:28.218034',7,24,'34699729330557983\n','P'),
                                                                                                                                            (8347648,9,'2025-02-19 10:46:28.219091',7,25,'636975049358227002\n','P'),
                                                                                                                                            (8396800,8,'2025-02-19 10:46:56.114701',8,26,'2\n','P'),
                                                                                                                                            (8327168,9,'2025-02-19 10:46:56.115735',8,27,'11\n','P'),
                                                                                                                                            (8540160,10,'2025-02-19 10:46:56.116796',8,28,'343959391703854850\n','P'),
                                                                                                                                            (8458240,11,'2025-02-19 10:46:56.117845',8,29,'411903339261164011\n','P'),
                                                                                                                                            (8458240,0,'2025-02-19 10:46:56.118881',8,30,'380943886166622720\n','P'),
                                                                                                                                            (8331264,4,'2025-02-19 10:46:56.119920',8,31,'12\n','P'),
                                                                                                                                            (8339456,0,'2025-02-19 10:46:56.120991',8,32,'563860737173235856\n','P'),
                                                                                                                                            (8482816,0,'2025-02-19 10:46:56.122064',8,33,'81617112085997465\n','P'),
                                                                                                                                            (8511488,10,'2025-02-19 10:46:56.123098',8,34,'34699729330557983\n','P'),
                                                                                                                                            (8347648,0,'2025-02-19 10:46:56.124134',8,35,'636975049358227002\n','P'),
                                                                                                                                            (9158656,0,'2025-02-19 10:53:22.276016',9,36,'4\n','P'),
                                                                                                                                            (9146368,12,'2025-02-19 10:53:22.277615',9,37,'3\n','P'),
                                                                                                                                            (9228288,5,'2025-02-19 10:53:22.278688',9,38,'6\n','P'),
                                                                                                                                            (9060352,0,'2025-02-19 10:53:22.279749',9,39,'4\n','F'),
                                                                                                                                            (9805824,24,'2025-02-19 10:53:22.280951',9,40,'69\n','P'),
                                                                                                                                            (9388032,0,'2025-02-19 10:53:22.282179',9,41,'40\n','F'),
                                                                                                                                            (10469376,25,'2025-02-19 10:53:22.283764',9,42,'52\n','P'),
                                                                                                                                            (7999488,9,'2025-02-19 10:54:13.545029',10,43,'Hello World!\n','F'),
                                                                                                                                            (7839744,9,'2025-02-19 10:54:13.546104',10,44,'Hello World!\n','F'),
                                                                                                                                            (7884800,9,'2025-02-19 10:54:13.547158',10,45,'Hello World!\n','F'),
                                                                                                                                            (7888896,8,'2025-02-19 10:54:13.548218',10,46,'Hello World!\n','F'),
                                                                                                                                            (8007680,10,'2025-02-19 10:54:13.549780',10,47,'Hello World!\n','F'),
                                                                                                                                            (7942144,8,'2025-02-19 10:54:13.550847',10,48,'Hello World!\n','F'),
                                                                                                                                            (7897088,8,'2025-02-19 10:54:13.552434',10,49,'Hello World!\n','F'),
                                                                                                                                            (9248768,0,'2025-02-19 11:14:58.264526',11,50,'4\n','P'),
                                                                                                                                            (9146368,11,'2025-02-19 11:14:58.265618',11,51,'3\n','P'),
                                                                                                                                            (9224192,0,'2025-02-19 11:14:58.267739',11,52,'6\n','P'),
                                                                                                                                            (9187328,4,'2025-02-19 11:14:58.268775',11,53,'4\n','F'),
                                                                                                                                            (9814016,23,'2025-02-19 11:14:58.270330',11,54,'69\n','P'),
                                                                                                                                            (9379840,7,'2025-02-19 11:14:58.271879',11,55,'40\n','F'),
                                                                                                                                            (10600448,22,'2025-02-19 11:14:58.273429',11,56,'52\n','P'),
                                                                                                                                            (9224192,11,'2025-02-19 11:15:08.461790',12,57,'4\n','P'),
                                                                                                                                            (9289728,7,'2025-02-19 11:15:08.463362',12,58,'3\n','P'),
                                                                                                                                            (9183232,6,'2025-02-19 11:15:08.464939',12,59,'6\n','P'),
                                                                                                                                            (9134080,11,'2025-02-19 11:15:08.465983',12,60,'9\n','P'),
                                                                                                                                            (9891840,12,'2025-02-19 11:15:08.467014',12,61,'69\n','P'),
                                                                                                                                            (9310208,0,'2025-02-19 11:15:08.467539',12,62,'46\n','P'),
                                                                                                                                            (10510336,21,'2025-02-19 11:15:08.468543',12,63,'52\n','P'),
                                                                                                                                            (9232384,11,'2025-02-19 11:15:38.035367',13,64,'5\n','F'),
                                                                                                                                            (9203712,12,'2025-02-19 11:15:38.036416',13,65,'4\n','F'),
                                                                                                                                            (9179136,12,'2025-02-19 11:15:38.037474',13,66,'7\n','F'),
                                                                                                                                            (9195520,12,'2025-02-19 11:15:38.037996',13,67,'10\n','F'),
                                                                                                                                            (9760768,12,'2025-02-19 11:15:38.039058',13,68,'70\n','F'),
                                                                                                                                            (9347072,7,'2025-02-19 11:15:38.039577',13,69,'47\n','F'),
                                                                                                                                            (10514432,34,'2025-02-19 11:15:38.040642',13,70,'53\n','F'),
                                                                                                                                            (9179136,11,'2025-02-19 11:15:45.676168',14,71,'4\n','P'),
                                                                                                                                            (9224192,5,'2025-02-19 11:15:45.677740',14,72,'3\n','P'),
                                                                                                                                            (9289728,13,'2025-02-19 11:15:45.678797',14,73,'6\n','P'),
                                                                                                                                            (9261056,12,'2025-02-19 11:15:45.680362',14,74,'9\n','P'),
                                                                                                                                            (9924608,30,'2025-02-19 11:15:45.681399',14,75,'69\n','P'),
                                                                                                                                            (9392128,14,'2025-02-19 11:15:45.682956',14,76,'46\n','P'),
                                                                                                                                            (10543104,38,'2025-02-19 11:15:45.683996',14,77,'52\n','P'),
                                                                                                                                            (9211904,12,'2025-02-19 11:16:21.094373',15,78,'4\n','P'),
                                                                                                                                            (9179136,12,'2025-02-19 11:16:21.095412',15,79,'3\n','P'),
                                                                                                                                            (9084928,11,'2025-02-19 11:16:21.096459',15,80,'-1\n','F'),
                                                                                                                                            (9228288,11,'2025-02-19 11:16:21.096977',15,81,'-1\n','F'),
                                                                                                                                            (9879552,23,'2025-02-19 11:16:21.098021',15,82,'69\n','P'),
                                                                                                                                            (9416704,13,'2025-02-19 11:16:21.099067',15,83,'32\n','F'),
                                                                                                                                            (10534912,32,'2025-02-19 11:16:21.099585',15,84,'53\n','F'),
                                                                                                                                            (9146368,11,'2025-02-19 11:16:29.302594',16,85,'4\n','P'),
                                                                                                                                            (9228288,11,'2025-02-19 11:16:29.303631',16,86,'3\n','P'),
                                                                                                                                            (9228288,11,'2025-02-19 11:16:29.304686',16,87,'6\n','P'),
                                                                                                                                            (9175040,0,'2025-02-19 11:16:29.305761',16,88,'9\n','P'),
                                                                                                                                            (9891840,25,'2025-02-19 11:16:29.306800',16,89,'69\n','P'),
                                                                                                                                            (9416704,0,'2025-02-19 11:16:29.307317',16,90,'46\n','P'),
                                                                                                                                            (10588160,31,'2025-02-19 11:16:29.308698',16,91,'52\n','P'),
                                                                                                                                            (9326592,14,'2025-02-19 11:18:36.902509',17,92,'20\n','P'),
                                                                                                                                            (9244672,14,'2025-02-19 11:18:36.903544',17,93,'1166\n','P'),
                                                                                                                                            (9273344,15,'2025-02-19 11:18:36.904581',17,94,'155\n','P'),
                                                                                                                                            (9359360,0,'2025-02-19 11:18:36.905619',17,95,'17\n','P'),
                                                                                                                                            (9289728,0,'2025-02-19 11:18:36.906147',17,96,'4017\n','P'),
                                                                                                                                            (10145792,27,'2025-02-19 11:18:36.907186',17,97,'344\n','P'),
                                                                                                                                            (10235904,30,'2025-02-19 11:18:36.907708',17,98,'79\n','P'),
                                                                                                                                            (10543104,125,'2025-02-19 11:18:36.908978',17,99,'84\n','P'),
                                                                                                                                            (84062208,1129,'2025-02-19 11:18:36.910018',17,100,'29\n','P'),
                                                                                                                                            (11935744,434,'2025-02-19 11:18:36.910990',17,101,'13733\n','P'),
                                                                                                                                            (9359360,6,'2025-02-19 11:19:29.286374',18,102,'20\n','P'),
                                                                                                                                            (9252864,6,'2025-02-19 11:19:29.287410',18,103,'1166\n','P'),
                                                                                                                                            (9355264,0,'2025-02-19 11:19:29.288511',18,104,'155\n','P'),
                                                                                                                                            (9355264,15,'2025-02-19 11:19:29.289030',18,105,'17\n','P'),
                                                                                                                                            (9367552,16,'2025-02-19 11:19:29.290064',18,106,'4017\n','P'),
                                                                                                                                            (10174464,13,'2025-02-19 11:19:29.291146',18,107,'344\n','P'),
                                                                                                                                            (10227712,32,'2025-02-19 11:19:29.291658',18,108,'79\n','P'),
                                                                                                                                            (10559488,149,'2025-02-19 11:19:29.292719',18,109,'84\n','P'),
                                                                                                                                            (83951616,1079,'2025-02-19 11:19:29.293783',18,110,'29\n','P'),
                                                                                                                                            (11972608,433,'2025-02-19 11:19:29.294857',18,111,'13733\n','P'),
                                                                                                                                            (7970816,7,'2025-02-19 11:34:27.538063',19,112,'Hello World!\n','P'),
                                                                                                                                            (7876608,6,'2025-02-19 11:36:07.514726',20,113,'Hello World!\n','P'),
                                                                                                                                            (7856128,0,'2025-02-19 11:36:19.404661',21,114,'Hello World!\n','P'),
                                                                                                                                            (9232384,11,'2025-02-19 11:38:44.670116',22,115,'4\n','P'),
                                                                                                                                            (9187328,0,'2025-02-19 11:38:44.671149',22,116,'3\n','P'),
                                                                                                                                            (9146368,5,'2025-02-19 11:38:44.672699',22,117,'6\n','P'),
                                                                                                                                            (9240576,4,'2025-02-19 11:38:44.673219',22,118,'4\n','F'),
                                                                                                                                            (9904128,24,'2025-02-19 11:38:44.674257',22,119,'69\n','P'),
                                                                                                                                            (9428992,6,'2025-02-19 11:38:44.674779',22,120,'40\n','F'),
                                                                                                                                            (10518528,32,'2025-02-19 11:38:44.675821',22,121,'52\n','P'),
                                                                                                                                            (9220096,0,'2025-02-19 11:39:33.381570',23,122,'-1\n','F'),
                                                                                                                                            (9224192,15,'2025-02-19 11:39:33.382636',23,123,'-1\n','F'),
                                                                                                                                            (9187328,0,'2025-02-19 11:39:33.383696',23,124,'6\n','P'),
                                                                                                                                            (9228288,15,'2025-02-19 11:39:33.384740',23,125,'-1\n','F'),
                                                                                                                                            (9822208,0,'2025-02-19 11:39:33.385806',23,126,'-1\n','F'),
                                                                                                                                            (9310208,17,'2025-02-19 11:39:33.387584',23,127,'-1\n','F'),
                                                                                                                                            (10571776,26,'2025-02-19 11:39:33.389170',23,128,'52\n','P'),
                                                                                                                                            (9281536,11,'2025-02-19 11:40:09.059070',24,129,'4\n','P'),
                                                                                                                                            (9154560,11,'2025-02-19 11:40:09.060621',24,130,'3\n','P'),
                                                                                                                                            (9224192,11,'2025-02-19 11:40:09.061654',24,131,'-1\n','F'),
                                                                                                                                            (9162752,12,'2025-02-19 11:40:09.062691',24,132,'-1\n','F'),
                                                                                                                                            (9797632,23,'2025-02-19 11:40:09.064293',24,133,'69\n','P'),
                                                                                                                                            (9392128,7,'2025-02-19 11:40:09.065334',24,134,'32\n','F'),
                                                                                                                                            (10543104,32,'2025-02-19 11:40:09.066372',24,135,'53\n','F'),
                                                                                                                                            (9220096,11,'2025-02-19 11:48:12.323928',25,136,'4\n','P'),
                                                                                                                                            (9220096,11,'2025-02-19 11:48:12.323928',25,137,'3\n','P'),
                                                                                                                                            (9228288,11,'2025-02-19 11:48:12.325756',25,138,'6\n','P'),
                                                                                                                                            (9150464,11,'2025-02-19 11:48:12.326761',25,139,'9\n','P'),
                                                                                                                                            (9924608,23,'2025-02-19 11:48:12.327760',25,140,'69\n','P'),
                                                                                                                                            (9310208,7,'2025-02-19 11:48:12.328761',25,141,'46\n','P'),
                                                                                                                                            (10592256,30,'2025-02-19 11:48:12.329760',25,142,'52\n','P'),
                                                                                                                                            (9228288,0,'2025-02-19 11:48:26.459706',26,143,'4\n','P'),
                                                                                                                                            (9175040,13,'2025-02-19 11:48:26.460760',26,144,'3\n','P'),
                                                                                                                                            (9187328,13,'2025-02-19 11:48:26.461277',26,145,'6\n','P'),
                                                                                                                                            (9224192,0,'2025-02-19 11:48:26.462314',26,146,'9\n','P'),
                                                                                                                                            (9879552,26,'2025-02-19 11:48:26.463370',26,147,'69\n','P'),
                                                                                                                                            (9314304,14,'2025-02-19 11:48:26.464395',26,148,'46\n','P'),
                                                                                                                                            (10514432,32,'2025-02-19 11:48:26.465962',26,149,'52\n','P'),
                                                                                                                                            (8413184,10,'2025-02-19 11:52:11.920615',27,150,'1\n','F'),
                                                                                                                                            (8298496,11,'2025-02-19 11:52:11.921651',27,151,'10\n','F'),
                                                                                                                                            (8552448,6,'2025-02-19 11:52:11.922701',27,152,'343959391703854849\n','F'),
                                                                                                                                            (8531968,10,'2025-02-19 11:52:11.923218',27,153,'411903339261164010\n','F'),
                                                                                                                                            (8433664,11,'2025-02-19 11:52:11.924265',27,154,'380943886166622719\n','F'),
                                                                                                                                            (8409088,10,'2025-02-19 11:52:11.925299',27,155,'11\n','F'),
                                                                                                                                            (8286208,10,'2025-02-19 11:52:11.925832',27,156,'563860737173235855\n','F'),
                                                                                                                                            (8503296,12,'2025-02-19 11:52:11.926364',27,157,'81617112085997464\n','F'),
                                                                                                                                            (8474624,11,'2025-02-19 11:52:11.927416',27,158,'34699729330557982\n','F'),
                                                                                                                                            (8372224,10,'2025-02-19 11:52:11.928257',27,159,'636975049358227001\n','F'),
                                                                                                                                            (8187904,0,'2025-02-19 11:52:34.182104',28,160,'2\n','P'),
                                                                                                                                            (8298496,0,'2025-02-19 11:52:34.183657',28,161,'11\n','P'),
                                                                                                                                            (8495104,10,'2025-02-19 11:52:34.184716',28,162,'343959391703854850\n','P'),
                                                                                                                                            (8478720,11,'2025-02-19 11:52:34.186105',28,163,'411903339261164011\n','P'),
                                                                                                                                            (8429568,12,'2025-02-19 11:52:34.187199',28,164,'380943886166622720\n','P'),
                                                                                                                                            (8351744,8,'2025-02-19 11:52:34.188757',28,165,'12\n','P'),
                                                                                                                                            (8335360,10,'2025-02-19 11:52:34.189798',28,166,'563860737173235856\n','P'),
                                                                                                                                            (8540160,10,'2025-02-19 11:52:34.191974',28,167,'81617112085997465\n','P'),
                                                                                                                                            (8519680,0,'2025-02-19 11:52:34.193590',28,168,'34699729330557983\n','P'),
                                                                                                                                            (8413184,9,'2025-02-19 11:52:34.194645',28,169,'636975049358227002\n','P'),
                                                                                                                                            (8327168,9,'2025-02-19 12:01:38.061715',29,170,'2\n','P'),
                                                                                                                                            (8376320,9,'2025-02-19 12:01:38.062756',29,171,'11\n','P'),
                                                                                                                                            (8585216,6,'2025-02-19 12:01:38.063277',29,172,'343959391703854850\n','P'),
                                                                                                                                            (8536064,12,'2025-02-19 12:01:38.064852',29,173,'411903339261164011\n','P'),
                                                                                                                                            (8511488,11,'2025-02-19 12:01:38.065946',29,174,'380943886166622720\n','P'),
                                                                                                                                            (8257536,10,'2025-02-19 12:01:38.067015',29,175,'12\n','P'),
                                                                                                                                            (8290304,9,'2025-02-19 12:01:38.068055',29,176,'563860737173235856\n','P'),
                                                                                                                                            (8409088,10,'2025-02-19 12:01:38.068578',29,177,'81617112085997465\n','P'),
                                                                                                                                            (8392704,11,'2025-02-19 12:01:38.069616',29,178,'34699729330557983\n','P'),
                                                                                                                                            (8368128,4,'2025-02-19 12:01:38.070655',29,179,'636975049358227002\n','P'),
                                                                                                                                            (9273344,13,'2025-02-19 13:33:51.606525',32,188,'20\n','P'),
                                                                                                                                            (9273344,14,'2025-02-19 13:33:51.608306',32,189,'1166\n','P'),
                                                                                                                                            (9326592,9,'2025-02-19 13:33:51.610381',32,190,'155\n','P'),
                                                                                                                                            (9396224,15,'2025-02-19 13:33:51.611411',32,191,'17\n','P'),
                                                                                                                                            (9199616,16,'2025-02-19 13:33:51.614298',32,192,'4017\n','P'),
                                                                                                                                            (10149888,28,'2025-02-19 13:33:51.615885',32,193,'344\n','P'),
                                                                                                                                            (10190848,32,'2025-02-19 13:33:51.616930',32,194,'79\n','P'),
                                                                                                                                            (10469376,126,'2025-02-19 13:33:51.617449',32,195,'84\n','P'),
                                                                                                                                            (84004864,1141,'2025-02-19 13:33:51.618482',32,196,'29\n','P'),
                                                                                                                                            (11898880,428,'2025-02-19 13:33:51.619003',32,197,'13733\n','P'),
                                                                                                                                            (9342976,15,'2025-02-19 13:34:30.074525',33,198,'20\n','P'),
                                                                                                                                            (9355264,9,'2025-02-19 13:34:30.074525',33,199,'1166\n','P'),
                                                                                                                                            (9199616,7,'2025-02-19 13:34:30.078715',33,200,'155\n','P'),
                                                                                                                                            (9293824,13,'2025-02-19 13:34:30.078715',33,201,'17\n','P'),
                                                                                                                                            (9322496,16,'2025-02-19 13:34:30.082307',33,202,'4017\n','P'),
                                                                                                                                            (10170368,26,'2025-02-19 13:34:30.085323',33,203,'344\n','P'),
                                                                                                                                            (10117120,31,'2025-02-19 13:34:30.086955',33,204,'79\n','P'),
                                                                                                                                            (10514432,123,'2025-02-19 13:34:30.089064',33,205,'84\n','P'),
                                                                                                                                            (84099072,1104,'2025-02-19 13:34:30.091485',33,206,'29\n','P'),
                                                                                                                                            (11776000,424,'2025-02-19 13:34:30.095042',33,207,'13733\n','P'),
                                                                                                                                            (9342976,11,'2025-02-19 13:35:08.276146',34,208,'20\n','P'),
                                                                                                                                            (9273344,16,'2025-02-19 13:35:08.281463',34,209,'1166\n','P'),
                                                                                                                                            (9383936,14,'2025-02-19 13:35:08.284322',34,210,'155\n','P'),
                                                                                                                                            (9285632,15,'2025-02-19 13:35:08.286993',34,211,'17\n','P'),
                                                                                                                                            (9363456,8,'2025-02-19 13:35:08.289078',34,212,'4017\n','P'),
                                                                                                                                            (10186752,14,'2025-02-19 13:35:08.290113',34,213,'344\n','P'),
                                                                                                                                            (10235904,38,'2025-02-19 13:35:08.291159',34,214,'79\n','P'),
                                                                                                                                            (10485760,137,'2025-02-19 13:35:08.292721',34,215,'84\n','P'),
                                                                                                                                            (84205568,1190,'2025-02-19 13:35:08.293757',34,216,'29\n','P'),
                                                                                                                                            (11898880,443,'2025-02-19 13:35:08.294420',34,217,'13733\n','P'),
                                                                                                                                            (9326592,9,'2025-02-19 13:35:20.887334',35,218,'20\n','P'),
                                                                                                                                            (9244672,13,'2025-02-19 13:35:20.889004',35,219,'1166\n','P'),
                                                                                                                                            (9269248,14,'2025-02-19 13:35:20.890600',35,220,'155\n','P'),
                                                                                                                                            (9404416,15,'2025-02-19 13:35:20.891644',35,221,'17\n','P'),
                                                                                                                                            (9359360,16,'2025-02-19 13:35:20.893411',35,222,'4017\n','P'),
                                                                                                                                            (10227712,26,'2025-02-19 13:35:20.894492',35,223,'344\n','P'),
                                                                                                                                            (10186752,34,'2025-02-19 13:35:20.896036',35,224,'79\n','P'),
                                                                                                                                            (10485760,116,'2025-02-19 13:35:20.896699',35,225,'84\n','P'),
                                                                                                                                            (84226048,1215,'2025-02-19 13:35:20.897887',35,226,'29\n','P'),
                                                                                                                                            (11931648,444,'2025-02-19 13:35:20.898394',35,227,'13733\n','P'),
                                                                                                                                            (9273344,0,'2025-02-19 13:35:34.607474',36,228,'20\n','P'),
                                                                                                                                            (9244672,0,'2025-02-19 13:35:34.608514',36,229,'1166\n','P'),
                                                                                                                                            (9318400,7,'2025-02-19 13:35:34.609539',36,230,'155\n','P'),
                                                                                                                                            (9261056,15,'2025-02-19 13:35:34.611109',36,231,'17\n','P'),
                                                                                                                                            (9310208,0,'2025-02-19 13:35:34.612725',36,232,'4017\n','P'),
                                                                                                                                            (10174464,18,'2025-02-19 13:35:34.613763',36,233,'344\n','P'),
                                                                                                                                            (10158080,24,'2025-02-19 13:35:34.614887',36,234,'79\n','P'),
                                                                                                                                            (10543104,129,'2025-02-19 13:35:34.616104',36,235,'84\n','P'),
                                                                                                                                            (84004864,1139,'2025-02-19 13:35:34.617802',36,236,'29\n','P'),
                                                                                                                                            (11853824,430,'2025-02-19 13:35:34.618848',36,237,'13733\n','P'),
                                                                                                                                            (9179136,6,'2025-02-19 13:51:34.533887',37,238,'4\n','P'),
                                                                                                                                            (9175040,12,'2025-02-19 13:51:34.535450',37,239,'3\n','P'),
                                                                                                                                            (9101312,12,'2025-02-19 13:51:34.536538',37,240,'-1\n','F'),
                                                                                                                                            (9109504,0,'2025-02-19 13:51:34.537584',37,241,'-1\n','F'),
                                                                                                                                            (9895936,9,'2025-02-19 13:51:34.539140',37,242,'-1\n','F'),
                                                                                                                                            (9347072,12,'2025-02-19 13:51:34.540173',37,243,'-1\n','F'),
                                                                                                                                            (10559488,26,'2025-02-19 13:51:34.541216',37,244,'-1\n','F'),
                                                                                                                                            (9097216,11,'2025-02-19 13:52:20.692405',38,245,'-1\n','F'),
                                                                                                                                            (9187328,11,'2025-02-19 13:52:20.693504',38,246,'-1\n','F'),
                                                                                                                                            (9146368,12,'2025-02-19 13:52:20.694573',38,247,'8\n','F'),
                                                                                                                                            (9150464,13,'2025-02-19 13:52:20.695611',38,248,'9\n','P'),
                                                                                                                                            (9838592,25,'2025-02-19 13:52:20.696132',38,249,'103\n','F'),
                                                                                                                                            (9342976,14,'2025-02-19 13:52:20.697708',38,250,'47\n','F'),
                                                                                                                                            (10596352,39,'2025-02-19 13:52:20.699268',38,251,'102\n','F'),
                                                                                                                                            (9183232,5,'2025-02-19 13:52:34.103872',39,252,'4\n','P'),
                                                                                                                                            (9146368,11,'2025-02-19 13:52:34.105434',39,253,'3\n','P'),
                                                                                                                                            (9101312,0,'2025-02-19 13:52:34.106477',39,254,'6\n','P'),
                                                                                                                                            (9175040,10,'2025-02-19 13:52:34.108596',39,255,'9\n','P'),
                                                                                                                                            (9842688,24,'2025-02-19 13:52:34.110153',39,256,'69\n','P'),
                                                                                                                                            (9338880,15,'2025-02-19 13:52:34.111187',39,257,'46\n','P'),
                                                                                                                                            (10584064,30,'2025-02-19 13:52:34.111702',39,258,'52\n','P'),
                                                                                                                                            (9175040,12,'2025-02-19 13:55:20.956388',40,259,'4\n','P'),
                                                                                                                                            (9170944,11,'2025-02-19 13:55:20.958016',40,260,'3\n','P'),
                                                                                                                                            (9146368,0,'2025-02-19 13:55:20.959057',40,261,'6\n','P'),
                                                                                                                                            (9248768,13,'2025-02-19 13:55:20.959577',40,262,'9\n','P'),
                                                                                                                                            (9912320,23,'2025-02-19 13:55:20.960623',40,263,'69\n','P'),
                                                                                                                                            (9338880,13,'2025-02-19 13:55:20.961678',40,264,'46\n','P'),
                                                                                                                                            (10522624,33,'2025-02-19 13:55:20.965459',40,265,'52\n','P'),
                                                                                                                                            (9101312,13,'2025-02-19 14:01:29.785464',41,266,'4\n','P'),
                                                                                                                                            (9154560,13,'2025-02-19 14:01:29.787560',41,267,'3\n','P'),
                                                                                                                                            (9154560,13,'2025-02-19 14:01:29.788617',41,268,'6\n','P'),
                                                                                                                                            (9183232,0,'2025-02-19 14:01:29.789656',41,269,'9\n','P'),
                                                                                                                                            (9908224,25,'2025-02-19 14:01:29.790180',41,270,'69\n','P'),
                                                                                                                                            (9347072,0,'2025-02-19 14:01:29.791134',41,271,'46\n','P'),
                                                                                                                                            (10592256,23,'2025-02-19 14:01:29.791684',41,272,'52\n','P'),
                                                                                                                                            (9179136,0,'2025-02-19 14:01:37.530768',42,273,'4\n','P'),
                                                                                                                                            (9261056,11,'2025-02-19 14:01:37.531819',42,274,'3\n','P'),
                                                                                                                                            (9228288,12,'2025-02-19 14:01:37.532337',42,275,'6\n','P'),
                                                                                                                                            (9289728,12,'2025-02-19 14:01:37.533341',42,276,'9\n','P'),
                                                                                                                                            (9809920,16,'2025-02-19 14:01:37.535881',42,277,'69\n','P'),
                                                                                                                                            (9388032,14,'2025-02-19 14:01:37.536881',42,278,'46\n','P'),
                                                                                                                                            (10592256,31,'2025-02-19 14:01:37.538388',42,279,'52\n','P'),
                                                                                                                                            (9252864,12,'2025-02-19 14:01:44.136012',43,280,'4\n','P'),
                                                                                                                                            (9211904,12,'2025-02-19 14:01:44.137149',43,281,'3\n','P'),
                                                                                                                                            (9293824,0,'2025-02-19 14:01:44.137712',43,282,'6\n','P'),
                                                                                                                                            (9183232,12,'2025-02-19 14:01:44.138792',43,283,'9\n','P'),
                                                                                                                                            (9883648,23,'2025-02-19 14:01:44.139314',43,284,'69\n','P'),
                                                                                                                                            (9424896,14,'2025-02-19 14:01:44.140384',43,285,'46\n','P'),
                                                                                                                                            (10543104,31,'2025-02-19 14:01:44.141267',43,286,'52\n','P'),
                                                                                                                                            (9289728,0,'2025-02-20 10:30:10.393063',44,287,'20\n','P'),
                                                                                                                                            (9306112,13,'2025-02-20 10:30:10.394639',44,288,'1166\n','P'),
                                                                                                                                            (9363456,13,'2025-02-20 10:30:10.395674',44,289,'155\n','P'),
                                                                                                                                            (9379840,14,'2025-02-20 10:30:10.396726',44,290,'17\n','P'),
                                                                                                                                            (9580544,10,'2025-02-20 10:30:10.397768',44,291,'4017\n','P'),
                                                                                                                                            (10285056,18,'2025-02-20 10:30:10.399320',44,292,'344\n','P'),
                                                                                                                                            (10219520,30,'2025-02-20 10:30:10.400890',44,293,'79\n','P'),
                                                                                                                                            (10731520,121,'2025-02-20 10:30:10.402444',44,294,'84\n','P'),
                                                                                                                                            (84144128,1101,'2025-02-20 10:30:10.404029',44,295,'29\n','P'),
                                                                                                                                            (11984896,425,'2025-02-20 10:30:10.405073',44,296,'13733\n','P'),
                                                                                                                                            (9347072,6,'2025-02-20 10:30:25.422318',45,297,'20\n','P'),
                                                                                                                                            (9306112,12,'2025-02-20 10:30:25.423393',45,298,'1166\n','P'),
                                                                                                                                            (9306112,7,'2025-02-20 10:30:25.424433',45,299,'155\n','P'),
                                                                                                                                            (9404416,13,'2025-02-20 10:30:25.425468',45,300,'17\n','P'),
                                                                                                                                            (9367552,14,'2025-02-20 10:30:25.427028',45,301,'4017\n','P'),
                                                                                                                                            (10141696,17,'2025-02-20 10:30:25.427551',45,302,'344\n','P'),
                                                                                                                                            (10301440,14,'2025-02-20 10:30:25.428558',45,303,'79\n','P'),
                                                                                                                                            (10530816,123,'2025-02-20 10:30:25.430385',45,304,'84\n','P'),
                                                                                                                                            (84217856,1170,'2025-02-20 10:30:25.431478',45,305,'29\n','P'),
                                                                                                                                            (12021760,451,'2025-02-20 10:30:25.431478',45,306,'13733\n','P'),
                                                                                                                                            (9437184,9,'2025-02-20 10:36:13.090349',46,307,'20\n','P'),
                                                                                                                                            (9420800,13,'2025-02-20 10:36:13.092033',46,308,'1166\n','P'),
                                                                                                                                            (9355264,10,'2025-02-20 10:36:13.093641',46,309,'155\n','P'),
                                                                                                                                            (9281536,15,'2025-02-20 10:36:13.094716',46,310,'17\n','P'),
                                                                                                                                            (9580544,15,'2025-02-20 10:36:13.095760',46,311,'4017\n','P'),
                                                                                                                                            (10207232,33,'2025-02-20 10:36:13.096801',46,312,'344\n','P'),
                                                                                                                                            (10387456,38,'2025-02-20 10:36:13.097325',46,313,'79\n','P'),
                                                                                                                                            (10493952,130,'2025-02-20 10:36:13.098619',46,314,'84\n','P'),
                                                                                                                                            (84189184,1206,'2025-02-20 10:36:13.099654',46,315,'29\n','P'),
                                                                                                                                            (11984896,446,'2025-02-20 10:36:13.100680',46,316,'13733\n','P'),
                                                                                                                                            (9359360,13,'2025-02-20 10:36:26.099868',47,317,'20\n','P'),
                                                                                                                                            (9285632,12,'2025-02-20 10:36:26.101429',47,318,'1166\n','P'),
                                                                                                                                            (9531392,13,'2025-02-20 10:36:26.102473',47,319,'155\n','P'),
                                                                                                                                            (9338880,13,'2025-02-20 10:36:26.104035',47,320,'17\n','P'),
                                                                                                                                            (9330688,7,'2025-02-20 10:36:26.106440',47,321,'4017\n','P'),
                                                                                                                                            (10440704,27,'2025-02-20 10:36:26.108022',47,322,'344\n','P'),
                                                                                                                                            (10207232,9,'2025-02-20 10:36:26.109596',47,323,'79\n','P'),
                                                                                                                                            (10510336,135,'2025-02-20 10:36:26.111459',47,324,'84\n','P'),
                                                                                                                                            (84189184,1143,'2025-02-20 10:36:26.113626',47,325,'29\n','P'),
                                                                                                                                            (11964416,470,'2025-02-20 10:36:26.115233',47,326,'13733\n','P'),
                                                                                                                                            (8495104,9,'2025-02-20 10:38:12.251463',48,327,'2\n','P'),
                                                                                                                                            (8355840,10,'2025-02-20 10:38:12.253064',48,328,'11\n','P'),
                                                                                                                                            (8593408,11,'2025-02-20 10:38:12.253588',48,329,'343959391703854850\n','P'),
                                                                                                                                            (8511488,6,'2025-02-20 10:38:12.254644',48,330,'411903339261164011\n','P'),
                                                                                                                                            (8450048,10,'2025-02-20 10:38:12.255689',48,331,'380943886166622720\n','P'),
                                                                                                                                            (8491008,0,'2025-02-20 10:38:12.256744',48,332,'12\n','P'),
                                                                                                                                            (8429568,10,'2025-02-20 10:38:12.257264',48,333,'563860737173235856\n','P'),
                                                                                                                                            (8536064,11,'2025-02-20 10:38:12.258316',48,334,'81617112085997465\n','P'),
                                                                                                                                            (8572928,11,'2025-02-20 10:38:12.259354',48,335,'34699729330557983\n','P'),
                                                                                                                                            (8400896,10,'2025-02-20 10:38:12.259874',48,336,'636975049358227002\n','P'),
                                                                                                                                            (8355840,4,'2025-02-20 10:38:19.427474',49,337,'2\n','P'),
                                                                                                                                            (8486912,9,'2025-02-20 10:38:19.429052',49,338,'11\n','P'),
                                                                                                                                            (8589312,6,'2025-02-20 10:38:19.429572',49,339,'343959391703854850\n','P'),
                                                                                                                                            (8568832,14,'2025-02-20 10:38:19.430812',49,340,'411903339261164011\n','P'),
                                                                                                                                            (8474624,12,'2025-02-20 10:38:19.431889',49,341,'380943886166622720\n','P'),
                                                                                                                                            (8433664,0,'2025-02-20 10:38:19.432957',49,342,'12\n','P'),
                                                                                                                                            (8634368,10,'2025-02-20 10:38:19.433985',49,343,'563860737173235856\n','P'),
                                                                                                                                            (8515584,12,'2025-02-20 10:38:19.435035',49,344,'81617112085997465\n','P'),
                                                                                                                                            (8667136,0,'2025-02-20 10:38:19.436097',49,345,'34699729330557983\n','P'),
                                                                                                                                            (8486912,10,'2025-02-20 10:38:19.436622',49,346,'636975049358227002\n','P'),
                                                                                                                                            (9441280,12,'2025-02-20 10:42:20.752247',50,347,'4\n','P'),
                                                                                                                                            (9207808,10,'2025-02-20 10:42:20.753305',50,348,'3\n','P'),
                                                                                                                                            (9433088,11,'2025-02-20 10:42:20.754993',50,349,'6\n','P'),
                                                                                                                                            (9203712,12,'2025-02-20 10:42:20.756551',50,350,'9\n','P'),
                                                                                                                                            (9940992,23,'2025-02-20 10:42:20.758103',50,351,'69\n','P'),
                                                                                                                                            (9506816,0,'2025-02-20 10:42:20.759154',50,352,'46\n','P'),
                                                                                                                                            (10600448,30,'2025-02-20 10:42:20.760193',50,353,'52\n','P'),
                                                                                                                                            (9433088,11,'2025-02-20 10:42:26.672726',51,354,'4\n','P'),
                                                                                                                                            (9158656,11,'2025-02-20 10:42:26.674293',51,355,'3\n','P'),
                                                                                                                                            (9265152,11,'2025-02-20 10:42:26.675347',51,356,'6\n','P'),
                                                                                                                                            (9437184,11,'2025-02-20 10:42:26.676943',51,357,'9\n','P'),
                                                                                                                                            (9998336,22,'2025-02-20 10:42:26.677987',51,358,'69\n','P'),
                                                                                                                                            (9547776,14,'2025-02-20 10:42:26.679035',51,359,'46\n','P'),
                                                                                                                                            (10809344,31,'2025-02-20 10:42:26.680074',51,360,'52\n','P'),
                                                                                                                                            (8351744,7,'2025-02-20 10:45:25.619340',52,361,'360\n','P'),
                                                                                                                                            (8409088,7,'2025-02-20 10:45:25.620469',52,362,'60\n','P'),
                                                                                                                                            (8355840,8,'2025-02-20 10:45:25.621511',52,363,'7\n','P'),
                                                                                                                                            (8433664,7,'2025-02-20 10:45:25.622030',52,364,'11000\n','P'),
                                                                                                                                            (8368128,0,'2025-02-20 10:45:25.623242',52,365,'22\n','P'),
                                                                                                                                            (8523776,3,'2025-02-20 10:45:32.168782',53,366,'360\n','P'),
                                                                                                                                            (8577024,0,'2025-02-20 10:45:32.169832',53,367,'60\n','P'),
                                                                                                                                            (8466432,7,'2025-02-20 10:45:32.170370',53,368,'7\n','P'),
                                                                                                                                            (8482816,0,'2025-02-20 10:45:32.171403',53,369,'11000\n','P'),
                                                                                                                                            (8593408,8,'2025-02-20 10:45:32.172435',53,370,'22\n','P'),
                                                                                                                                            (7929856,7,'2025-02-20 10:48:12.860292',54,371,'Hello World!\n','P'),
                                                                                                                                            (7925760,7,'2025-02-20 10:48:35.853639',55,372,'Hello World!\n','P'),
                                                                                                                                            (9531392,0,'2025-02-20 10:51:14.802759',56,373,'20\n','P'),
                                                                                                                                            (9306112,14,'2025-02-20 10:51:14.804175',56,374,'1166\n','P'),
                                                                                                                                            (9367552,0,'2025-02-20 10:51:14.805204',56,375,'155\n','P'),
                                                                                                                                            (9486336,13,'2025-02-20 10:51:14.805715',56,376,'17\n','P'),
                                                                                                                                            (9347072,8,'2025-02-20 10:51:14.806747',56,377,'4017\n','P'),
                                                                                                                                            (10379264,28,'2025-02-20 10:51:14.807264',56,378,'344\n','P'),
                                                                                                                                            (10219520,21,'2025-02-20 10:51:14.808288',56,379,'79\n','P'),
                                                                                                                                            (10620928,136,'2025-02-20 10:51:14.808799',56,380,'84\n','P'),
                                                                                                                                            (84189184,1172,'2025-02-20 10:51:14.809339',56,381,'29\n','P'),
                                                                                                                                            (11939840,465,'2025-02-20 10:51:14.810361',56,382,'13733\n','P'),
                                                                                                                                            (9289728,15,'2025-02-20 10:51:18.321556',57,383,'20\n','P'),
                                                                                                                                            (9302016,14,'2025-02-20 10:51:18.322626',57,384,'1166\n','P'),
                                                                                                                                            (9379840,13,'2025-02-20 10:51:18.324196',57,385,'155\n','P'),
                                                                                                                                            (9379840,0,'2025-02-20 10:51:18.324719',57,386,'17\n','P'),
                                                                                                                                            (9347072,14,'2025-02-20 10:51:18.325772',57,387,'4017\n','P'),
                                                                                                                                            (10440704,25,'2025-02-20 10:51:18.326813',57,388,'344\n','P'),
                                                                                                                                            (10268672,23,'2025-02-20 10:51:18.328413',57,389,'79\n','P'),
                                                                                                                                            (10506240,134,'2025-02-20 10:51:18.329448',57,390,'84\n','P'),
                                                                                                                                            (84193280,1188,'2025-02-20 10:51:18.330484',57,391,'29\n','P'),
                                                                                                                                            (11972608,454,'2025-02-20 10:51:18.331526',57,392,'13733\n','P'),
                                                                                                                                            (9363456,17,'2025-02-20 10:52:45.183419',58,393,'20\n','P'),
                                                                                                                                            (9359360,13,'2025-02-20 10:52:45.185306',58,394,'1166\n','P'),
                                                                                                                                            (9396224,14,'2025-02-20 10:52:45.190517',58,395,'155\n','P'),
                                                                                                                                            (9302016,7,'2025-02-20 10:52:45.193198',58,396,'17\n','P'),
                                                                                                                                            (9400320,18,'2025-02-20 10:52:45.195922',58,397,'4017\n','P'),
                                                                                                                                            (10440704,34,'2025-02-20 10:52:45.198273',58,398,'344\n','P'),
                                                                                                                                            (10215424,39,'2025-02-20 10:52:45.201038',58,399,'79\n','P'),
                                                                                                                                            (10579968,134,'2025-02-20 10:52:45.203166',58,400,'84\n','P'),
                                                                                                                                            (84209664,1109,'2025-02-20 10:52:45.205272',58,401,'29\n','P'),
                                                                                                                                            (11972608,456,'2025-02-20 10:52:45.207941',58,402,'13733\n','P'),
                                                                                                                                            (9420800,13,'2025-02-20 10:52:54.391328',59,403,'20\n','P'),
                                                                                                                                            (9363456,0,'2025-02-20 10:52:54.393261',59,404,'1166\n','P'),
                                                                                                                                            (9326592,6,'2025-02-20 10:52:54.394969',59,405,'155\n','P'),
                                                                                                                                            (9314304,12,'2025-02-20 10:52:54.396593',59,406,'17\n','P'),
                                                                                                                                            (9580544,15,'2025-02-20 10:52:54.398186',59,407,'4017\n','P'),
                                                                                                                                            (10440704,27,'2025-02-20 10:52:54.399249',59,408,'344\n','P'),
                                                                                                                                            (10461184,22,'2025-02-20 10:52:54.401432',59,409,'79\n','P'),
                                                                                                                                            (10620928,121,'2025-02-20 10:52:54.403015',59,410,'84\n','P'),
                                                                                                                                            (84062208,1154,'2025-02-20 10:52:54.404057',59,411,'29\n','P'),
                                                                                                                                            (12025856,424,'2025-02-20 10:52:54.405738',59,412,'13733\n','P'),
                                                                                                                                            (9277440,11,'2025-02-20 11:50:52.851245',60,413,'3\n','P'),
                                                                                                                                            (9596928,10,'2025-02-20 11:50:52.855135',60,414,'2\n','P'),
                                                                                                                                            (9486336,10,'2025-02-20 11:50:52.858256',60,415,'2\n','P'),
                                                                                                                                            (9408512,5,'2025-02-20 11:50:52.861212',60,416,'3\n','P'),
                                                                                                                                            (111837184,393,'2025-02-20 11:50:52.866757',60,417,'5000\n','P'),
                                                                                                                                            (8355840,10,'2025-02-20 11:54:40.567200',61,418,'2\n','P'),
                                                                                                                                            (8355840,9,'2025-02-20 11:54:40.568769',61,419,'11\n','P'),
                                                                                                                                            (8527872,12,'2025-02-20 11:54:40.569800',61,420,'343959391703854850\n','P'),
                                                                                                                                            (8585216,11,'2025-02-20 11:54:40.570836',61,421,'411903339261164011\n','P'),
                                                                                                                                            (8491008,10,'2025-02-20 11:54:40.571888',61,422,'380943886166622720\n','P'),
                                                                                                                                            (8445952,9,'2025-02-20 11:54:40.572924',61,423,'12\n','P'),
                                                                                                                                            (8527872,9,'2025-02-20 11:54:40.573962',61,424,'563860737173235856\n','P'),
                                                                                                                                            (8486912,11,'2025-02-20 11:54:40.575001',61,425,'81617112085997465\n','P'),
                                                                                                                                            (8552448,12,'2025-02-20 11:54:40.576036',61,426,'34699729330557983\n','P'),
                                                                                                                                            (8462336,9,'2025-02-20 11:54:40.577169',61,427,'636975049358227002\n','P'),
                                                                                                                                            (8531968,8,'2025-02-20 11:54:49.461824',62,428,'2\n','P'),
                                                                                                                                            (8589312,9,'2025-02-20 11:54:49.463383',62,429,'11\n','P'),
                                                                                                                                            (8515584,10,'2025-02-20 11:54:49.464418',62,430,'343959391703854850\n','P'),
                                                                                                                                            (8482816,11,'2025-02-20 11:54:49.465453',62,431,'411903339261164011\n','P'),
                                                                                                                                            (8478720,5,'2025-02-20 11:54:49.466486',62,432,'380943886166622720\n','P'),
                                                                                                                                            (8433664,0,'2025-02-20 11:54:49.467522',62,433,'12\n','P'),
                                                                                                                                            (8384512,9,'2025-02-20 11:54:49.469159',62,434,'563860737173235856\n','P'),
                                                                                                                                            (8536064,0,'2025-02-20 11:54:49.470211',62,435,'81617112085997465\n','P'),
                                                                                                                                            (8572928,11,'2025-02-20 11:54:49.471775',62,436,'34699729330557983\n','P'),
                                                                                                                                            (8388608,0,'2025-02-20 11:54:49.472293',62,437,'636975049358227002\n','P'),
                                                                                                                                            (9293824,13,'2025-02-20 11:57:04.431803',63,438,'-1\n','F'),
                                                                                                                                            (9289728,0,'2025-02-20 11:57:04.432843',63,439,'-1\n','F'),
                                                                                                                                            (9203712,0,'2025-02-20 11:57:04.433884',63,440,'-1\n','F'),
                                                                                                                                            (9207808,12,'2025-02-20 11:57:04.434404',63,441,'-1\n','F'),
                                                                                                                                            (9863168,27,'2025-02-20 11:57:04.434955',63,442,'104\n','F'),
                                                                                                                                            (9371648,14,'2025-02-20 11:57:04.435969',63,443,'39\n','F'),
                                                                                                                                            (10780672,32,'2025-02-20 11:57:04.435969',63,444,'-1\n','F'),
                                                                                                                                            (9342976,11,'2025-02-20 11:57:14.394161',64,445,'-1\n','F'),
                                                                                                                                            (9232384,11,'2025-02-20 11:57:14.395253',64,446,'-1\n','F'),
                                                                                                                                            (9232384,11,'2025-02-20 11:57:14.396292',64,447,'-1\n','F'),
                                                                                                                                            (9232384,0,'2025-02-20 11:57:14.397346',64,448,'-1\n','F'),
                                                                                                                                            (9990144,24,'2025-02-20 11:57:14.397864',64,449,'54\n','F'),
                                                                                                                                            (9457664,0,'2025-02-20 11:57:14.398907',64,450,'26\n','F'),
                                                                                                                                            (10588160,29,'2025-02-20 11:57:14.400018',64,451,'52\n','P'),
                                                                                                                                            (7946240,4,'2025-02-20 12:06:10.894309',65,452,'Hello World!\n','F'),
                                                                                                                                            (7946240,3,'2025-02-20 12:06:10.895348',65,453,'Hello World!\n','F'),
                                                                                                                                            (7929856,0,'2025-02-20 12:06:10.897052',65,454,'Hello World!\n','F'),
                                                                                                                                            (7991296,8,'2025-02-20 12:06:10.897568',65,455,'Hello World!\n','F'),
                                                                                                                                            (8151040,4,'2025-02-20 12:06:10.898606',65,456,'Hello World!\n','F'),
                                                                                                                                            (7995392,6,'2025-02-20 12:06:14.765353',66,457,'Hello World!\n','F'),
                                                                                                                                            (8032256,7,'2025-02-20 12:06:14.765880',66,458,'Hello World!\n','F'),
                                                                                                                                            (8151040,0,'2025-02-20 12:06:14.767726',66,459,'Hello World!\n','F'),
                                                                                                                                            (7995392,7,'2025-02-20 12:06:14.768841',66,460,'Hello World!\n','F'),
                                                                                                                                            (7925760,0,'2025-02-20 12:06:14.769875',66,461,'Hello World!\n','F'),
                                                                                                                                            (9269248,12,'2025-02-20 12:06:33.231484',67,462,'3\n','P'),
                                                                                                                                            (9355264,10,'2025-02-20 12:06:33.233198',67,463,'3\n','F'),
                                                                                                                                            (9322496,13,'2025-02-20 12:06:33.235164',67,464,'-1\n','F'),
                                                                                                                                            (9347072,6,'2025-02-20 12:06:33.236854',67,465,'3\n','P'),
                                                                                                                                            (110637056,328,'2025-02-20 12:06:33.237900',67,466,'-1\n','F'),
                                                                                                                                            (9371648,10,'2025-02-20 12:06:51.777145',68,467,'-1\n','F'),
                                                                                                                                            (9416704,5,'2025-02-20 12:06:51.778720',68,468,'3\n','F'),
                                                                                                                                            (9424896,10,'2025-02-20 12:06:51.779745',68,469,'-1\n','F'),
                                                                                                                                            (9474048,11,'2025-02-20 12:06:51.780779',68,470,'3\n','P'),
                                                                                                                                            (108818432,275,'2025-02-20 12:06:51.781828',68,471,'-1\n','F'),
                                                                                                                                            (9334784,0,'2025-02-20 12:06:56.673135',69,472,'3\n','P'),
                                                                                                                                            (9342976,0,'2025-02-20 12:06:56.675423',69,473,'2\n','P'),
                                                                                                                                            (9363456,10,'2025-02-20 12:06:56.677507',69,474,'2\n','P'),
                                                                                                                                            (9474048,10,'2025-02-20 12:06:56.679062',69,475,'3\n','P'),
                                                                                                                                            (111628288,362,'2025-02-20 12:06:56.680620',69,476,'5000\n','P'),
                                                                                                                                            (9297920,11,'2025-02-20 12:07:05.049082',70,477,'3\n','P'),
                                                                                                                                            (9412608,10,'2025-02-20 12:07:05.050219',70,478,'2\n','P'),
                                                                                                                                            (9453568,10,'2025-02-20 12:07:05.051423',70,479,'2\n','P'),
                                                                                                                                            (9584640,5,'2025-02-20 12:07:05.052524',70,480,'3\n','P'),
                                                                                                                                            (111742976,320,'2025-02-20 12:07:05.053055',70,481,'5000\n','P'),
                                                                                                                                            (9334784,11,'2025-02-20 12:07:27.990026',71,482,'3\n','P'),
                                                                                                                                            (9584640,10,'2025-02-20 12:07:27.991105',71,483,'2\n','P'),
                                                                                                                                            (9330688,10,'2025-02-20 12:07:27.992144',71,484,'2\n','P'),
                                                                                                                                            (9445376,5,'2025-02-20 12:07:27.993180',71,485,'3\n','P'),
                                                                                                                                            (111824896,294,'2025-02-20 12:07:27.994356',71,486,'5000\n','P');




/*!40000 ALTER TABLE `test_result` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `testcase`
--

LOCK TABLES `testcase` WRITE;
/*!40000 ALTER TABLE `testcase` DISABLE KEYS */;
INSERT INTO `testcase` VALUES
                           (1,'2025-02-03 19:10:07.000000',1,1,'2025-02-03 19:10:07.000000','NULL','Hello World!'),
                           (1,'2025-02-03 19:10:07.000000',2,2,'2025-02-03 19:10:07.000000','8 3\n150 130 90 110 140 200 120 90','360'),
                           (2,'2025-02-03 19:10:07.000000',2,3,'2025-02-03 19:10:07.000000','6 3\n10 30 25 50 20 30','60'),
                           (3,'2025-02-03 19:10:07.000000',2,4,'2025-02-03 19:10:07.000000','6 5\n4 5 1 6 4 7','7'),
                           (4,'2025-02-03 19:10:07.000000',2,5,'2025-02-03 19:10:07.000000','9 2\n1000 5000 3000 4000 2000 4000 1000 1000 1000','11000'),
                           (5,'2025-02-03 19:10:07.000000',2,6,'2025-02-03 19:10:07.000000','12 4\n5 5 5 6 6 6 7 7 7 8 8 8','22'),
                           (1,'2025-02-03 19:10:07.000000',3,7,'2025-02-03 19:10:07.000000','3 3\n0 0 0\n0 1 0\n0 0 0\n1 1 3\n3 3 3','4'),
                           (2,'2025-02-03 19:10:07.000000',3,8,'2025-02-03 19:10:07.000000','3 3\n0 0 0\n0 1 0\n0 0 0\n1 1 3\n3 3 1','3'),
                           (3,'2025-02-03 19:10:07.000000',3,9,'2025-02-03 19:10:07.000000','4 4\n0 0 0 0\n1 0 1 0\n0 0 0 0\n1 1 1 1\n2 4 2\n2 2 4','6'),
                           (4,'2025-02-03 19:10:07.000000',3,10,'2025-02-03 19:10:07.000000','5 6\n0 0 0 0 0 0\n0 1 1 0 1 0\n0 1 0 0 0 0\n0 0 1 1 1 0\n1 0 0 0 0 0\n4 2 3\n2 4 1','9'),
                           (1,'2025-02-03 19:10:07.000000',4,11,'2025-02-03 19:10:07.000000','1 7 3\n1 1 2\n1 2 4\n1 3 5','2'),
                           (2,'2025-02-03 19:10:07.000000',4,12,'2025-02-03 19:10:07.000000','1 1 3\n2 2 2\n3 1 6\n3 6 6','11'),
                           (1,'2025-02-03 19:10:07.000000',5,13,'2025-02-03 19:10:07.000000','7 6\n8\n1 2 1 2 2\n2 1 1 5 1\n6 7 3 7 6\n7 2 1 2 6\n3 3 2 6 2\n4 5 6 5 1\n5 1 5 7 5\n8 3 5 6 5\n2 1 7 4','3'),
                           (2,'2025-02-03 19:10:07.000000',5,14,'2025-02-03 19:10:07.000000','100 100\n5\n1 17 2 17 89\n2 59 3 59 28\n3 59 27 59 75\n4 3 4 66 4\n5 15 61 80 61\n17 4 59 28','2'),
                           (1,'2025-02-03 19:10:07.000000',6,15,'2025-02-03 19:10:07.000000','5 6\n1 3 7\n1 4 7\n2 4 2\n2 5 5\n3 4 8\n4 5 5','20'),
                           (2,'2025-02-03 19:10:07.000000',6,16,'2025-02-03 19:10:07.000000','6 11\n1 2 401\n1 4 138\n2 3 604\n2 4 698\n2 5 846\n3 4 117\n3 5 608\n3 6 161\n4 5 484\n4 6 461\n5 6 626','1166');
/*!40000 ALTER TABLE `testcase` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `today_ranking`
--

LOCK TABLES `today_ranking` WRITE;
/*!40000 ALTER TABLE `today_ranking` DISABLE KEYS */;

INSERT INTO `today_ranking` (`ranking`,`created_at`,`ranking_change`,`ranking_id`,`ranking_point`,`tier_id`,`user_id`) VALUES
                                                                                                                           (3,'2025-02-20 14:03:00.652159',0,16,800,5,1),
                                                                                                                           (11,'2025-02-20 14:03:00.654233',-7,17,390,2,2),
                                                                                                                           (17,'2025-02-20 14:03:00.656297',-5,18,100,1,3),
                                                                                                                           (9,'2025-02-20 14:03:00.657849',4,19,450,3,4),
                                                                                                                           (7,'2025-02-20 14:03:00.659937',-2,20,620,4,5),
                                                                                                                           (2,'2025-02-20 14:03:00.661576',0,21,860,5,6),
                                                                                                                           (12,'2025-02-20 14:03:00.663131',-4,22,220,2,7),
                                                                                                                           (6,'2025-02-20 14:03:00.664678',0,23,650,4,8),
                                                                                                                           (13,'2025-02-20 14:03:00.666229',-4,24,220,2,9),
                                                                                                                           (1,'2025-02-20 14:03:00.668295',0,25,1010,5,10),
                                                                                                                           (5,'2025-02-20 14:03:00.670365',6,26,720,4,11),
                                                                                                                           (4,'2025-02-20 14:03:00.672066',6,27,770,4,12),
                                                                                                                           (16,'2025-02-20 14:03:00.673628',-9,28,120,1,13),
                                                                                                                           (10,'2025-02-20 14:03:00.675189',4,29,450,3,14),
                                                                                                                           (8,'2025-02-20 14:03:00.676788',7,30,500,3,15),
                                                                                                                           (14,'2025-02-20 14:03:00.678365',14,31,200,2,16),
                                                                                                                           (15,'2025-02-20 14:03:00.679913',15,32,150,1,17);


/*!40000 ALTER TABLE `today_ranking` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `ranking_history`
--

LOCK TABLES `ranking_history` WRITE;
/*!40000 ALTER TABLE `ranking_history` DISABLE KEYS */;

INSERT INTO `ranking_history` (`ranking`,`ranking_change`,`created_at`,`ranking_history_id`,`ranking_point`,`tier_id`,`user_id`) VALUES
                                                                                                                                     (3,3,'2025-02-20 00:00:00.970277',1,550,3,1),
                                                                                                                                     (4,4,'2025-02-20 00:00:01.001261',2,390,2,2),
                                                                                                                                     (12,12,'2025-02-20 00:00:01.006173',3,100,1,3),
                                                                                                                                     (13,13,'2025-02-20 00:00:01.008803',4,100,1,4),
                                                                                                                                     (5,5,'2025-02-20 00:00:01.010925',5,320,2,5),
                                                                                                                                     (2,2,'2025-02-20 00:00:01.013550',6,560,3,6),
                                                                                                                                     (8,8,'2025-02-20 00:00:01.015816',7,120,1,7),
                                                                                                                                     (6,6,'2025-02-20 00:00:01.018013',8,250,2,8),
                                                                                                                                     (9,9,'2025-02-20 00:00:01.020676',9,120,1,9),
                                                                                                                                     (1,1,'2025-02-20 00:00:01.022767',10,760,4,10),
                                                                                                                                     (11,11,'2025-02-20 00:00:01.024942',11,120,1,11),
                                                                                                                                     (10,10,'2025-02-20 00:00:01.027036',12,120,1,12),
                                                                                                                                     (7,7,'2025-02-20 00:00:01.029186',13,120,1,13),
                                                                                                                                     (14,14,'2025-02-20 00:00:01.031871',14,100,1,14),
                                                                                                                                     (15,15,'2025-02-20 00:00:01.035047',15,0,1,15),
                                                                                                                                     (3,0,'2025-02-20 14:03:00.605582',16,800,5,1),
                                                                                                                                     (11,-7,'2025-02-20 14:03:00.626510',17,390,2,2),
                                                                                                                                     (17,-5,'2025-02-20 14:03:00.628108',18,100,1,3),
                                                                                                                                     (9,4,'2025-02-20 14:03:00.629510',19,450,3,4),
                                                                                                                                     (7,-2,'2025-02-20 14:03:00.631708',20,620,4,5),
                                                                                                                                     (2,0,'2025-02-20 14:03:00.632745',21,860,5,6),
                                                                                                                                     (12,-4,'2025-02-20 14:03:00.634324',22,220,2,7),
                                                                                                                                     (6,0,'2025-02-20 14:03:00.635878',23,650,4,8),
                                                                                                                                     (13,-4,'2025-02-20 14:03:00.636912',24,220,2,9),
                                                                                                                                     (1,0,'2025-02-20 14:03:00.638477',25,1010,5,10),
                                                                                                                                     (5,6,'2025-02-20 14:03:00.640028',26,720,4,11),
                                                                                                                                     (4,6,'2025-02-20 14:03:00.641058',27,770,4,12),
                                                                                                                                     (16,-9,'2025-02-20 14:03:00.643127',28,120,1,13),
                                                                                                                                     (10,4,'2025-02-20 14:03:00.644162',29,450,3,14),
                                                                                                                                     (8,7,'2025-02-20 14:03:00.645717',30,500,3,15),
                                                                                                                                     (14,14,'2025-02-20 14:03:00.647839',31,200,2,16),
                                                                                                                                     (15,15,'2025-02-20 14:03:00.648893',32,150,1,17);

/*!40000 ALTER TABLE `ranking_history` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `user_team_room`
--

LOCK TABLES `user_team_room` WRITE;
/*!40000 ALTER TABLE `user_team_room` DISABLE KEYS */;

INSERT INTO `user_team_room` (`team_order`,`created_at`,`team_room_id`,`user_id`) VALUES
                                                                                      (1,'2025-02-20 10:29:07.405386',1,12),
                                                                                      (0,'2025-02-20 10:29:07.393469',1,15),
                                                                                      (0,'2025-02-20 10:29:07.434713',2,1),
                                                                                      (1,'2025-02-20 10:29:07.437332',2,10),
                                                                                      (0,'2025-02-20 10:35:58.342730',3,6),
                                                                                      (1,'2025-02-20 10:35:58.343850',3,8),
                                                                                      (0,'2025-02-20 10:35:58.362431',4,11),
                                                                                      (1,'2025-02-20 10:35:58.363997',4,12),
                                                                                      (0,'2025-02-20 10:38:07.322940',5,8),
                                                                                      (1,'2025-02-20 10:38:07.323997',5,11),
                                                                                      (0,'2025-02-20 10:38:07.337852',6,6),
                                                                                      (1,'2025-02-20 10:38:07.339856',6,12),
                                                                                      (0,'2025-02-20 10:42:10.333035',7,4),
                                                                                      (1,'2025-02-20 10:42:10.334830',7,8),
                                                                                      (0,'2025-02-20 10:42:10.351932',8,11),
                                                                                      (1,'2025-02-20 10:42:10.354011',8,12),
                                                                                      (0,'2025-02-20 10:45:21.333839',9,4),
                                                                                      (1,'2025-02-20 10:45:21.334950',9,15),
                                                                                      (0,'2025-02-20 10:45:21.353225',10,5),
                                                                                      (2,'2025-02-20 10:45:21.356417',10,11),
                                                                                      (1,'2025-02-20 10:45:21.354792',10,12),
                                                                                      (0,'2025-02-20 10:47:54.333418',11,4),
                                                                                      (2,'2025-02-20 10:47:54.334993',11,14),
                                                                                      (1,'2025-02-20 10:47:54.334480',11,15),
                                                                                      (2,'2025-02-20 10:47:54.352069',12,5),
                                                                                      (0,'2025-02-20 10:47:54.348520',12,11),
                                                                                      (1,'2025-02-20 10:47:54.348520',12,12),
                                                                                      (1,'2025-02-20 10:51:10.334472',13,7),
                                                                                      (0,'2025-02-20 10:51:10.333413',13,9),
                                                                                      (1,'2025-02-20 10:51:10.349309',14,14),
                                                                                      (0,'2025-02-20 10:51:10.347306',14,15),
                                                                                      (0,'2025-02-20 11:50:46.416378',15,12),
                                                                                      (1,'2025-02-20 11:50:46.418017',15,15),
                                                                                      (0,'2025-02-20 11:50:46.438200',16,2),
                                                                                      (2,'2025-02-20 11:50:46.441944',16,3),
                                                                                      (1,'2025-02-20 11:50:46.439857',16,13),
                                                                                      (0,'2025-02-20 11:54:30.400201',17,2),
                                                                                      (1,'2025-02-20 11:54:30.401769',17,5),
                                                                                      (2,'2025-02-20 11:54:30.402291',17,13),
                                                                                      (0,'2025-02-20 11:54:30.421106',18,3),
                                                                                      (1,'2025-02-20 11:54:30.423469',18,15),
                                                                                      (0,'2025-02-20 11:56:44.411321',19,3),
                                                                                      (1,'2025-02-20 11:56:44.412397',19,15),
                                                                                      (0,'2025-02-20 11:56:44.429123',20,2),
                                                                                      (1,'2025-02-20 11:56:44.430701',20,5),
                                                                                      (2,'2025-02-20 11:56:44.432590',20,13);



/*!40000 ALTER TABLE `user_team_room` ENABLE KEYS */;
UNLOCK TABLES;

INSERT INTO side_problem (side_problem_title, side_problem_content, side_problem_answer, created_at) VALUES
                                                                                                         ('네트워크 프로토콜', '네트워크에서 데이터를 전송하는 데 사용하는 규약으로, IP 주소와 함께 사용되며, 웹 페이지 요청 및 전송 등에 사용되는 프로토콜이다.', 'HTTP', CURRENT_TIMESTAMP),
                                                                                                         ('자료구조', '데이터를 효율적으로 저장하고 검색하는 자료구조로, 특정 데이터를 빠르게 찾기 위해 트리 형태로 정렬된 데이터를 사용한다.', '이진 탐색 트리', CURRENT_TIMESTAMP),
                                                                                                         ('메모리 관리', '컴퓨터 프로그램이 종료될 때 메모리 상의 사용되지 않는 영역을 자동으로 회수하는 시스템이다.', '가비지 컬렉션', CURRENT_TIMESTAMP),
                                                                                                         ('운영체제 메모리', '운영체제에서 여러 프로세스가 동시에 실행될 수 있도록 하는 기술로, 각 프로세스는 독립적인 메모리 공간을 가진다.', '가상 메모리', CURRENT_TIMESTAMP),
                                                                                                         ('프로세스 동기화', '두 개 이상의 프로세스가 동시에 자원에 접근하려 할 때 발생할 수 있는 문제로, 이를 해결하지 않으면 시스템이 교착 상태에 빠진다.', '데드락', CURRENT_TIMESTAMP),
                                                                                                         ('데이터베이스 키', '데이터베이스에서 테이블의 행을 고유하게 식별하는 데 사용되는 키이다.', '기본 키', CURRENT_TIMESTAMP),
                                                                                                         ('쉘 프로그램', '오픈 소스 라이선스를 가지고 있으며, 유닉스 계열 시스템에서 사용할 수 있는 최신 버전의 터미널 쉘 프로그램이다.', 'Bash', CURRENT_TIMESTAMP),
                                                                                                         ('객체지향 특징', '객체 지향 프로그래밍에서, 객체의 상태를 변경할 수 있는 메소드나 기능을 제공하는 개념으로, 객체가 다른 객체의 정보를 가질 수 있도록 하는 특징이다.', '캡슐화', CURRENT_TIMESTAMP),
                                                                                                         ('정규식 문자', '정규 표현식에서 문자열 패턴을 매칭하는 데 사용되는 특수한 문자나 기호들의 집합이다.', '메타문자', CURRENT_TIMESTAMP),
                                                                                                         ('함수형 프로그래밍', '프로그래밍 언어에서, 함수를 호출하는 곳과 그 함수를 정의하는 곳 간의 경계를 명확히 하고, 상태를 유지하지 않게 하는 중요한 개념이다.', '순수 함수', CURRENT_TIMESTAMP),
                                                                                                         ('자료구조 FIFO', '여러 개의 데이터나 명령어를 연속적으로 다룰 때 효율적으로 처리할 수 있도록 도와주는 자료구조로, 한쪽 끝에서만 데이터가 추가되거나 삭제되는 방식이다.', '큐', CURRENT_TIMESTAMP),
                                                                                                         ('시스템 통신', '두 개 이상의 서로 다른 시스템 간에 정보를 교환할 수 있게 해주는 방식으로, HTTP나 FTP와 같은 프로토콜을 사용한다.', 'API', CURRENT_TIMESTAMP),
                                                                                                         ('프로그래밍 기법', '고급 프로그래밍 언어에서, 반복문을 단순히 수학적 계산이나 반복적인 처리 없이 정의할 수 있도록 해주는 방식이다.', '재귀', CURRENT_TIMESTAMP),
                                                                                                         ('명령어 처리기', '유닉스 계열 시스템에서, 사용자와 시스템 간의 명령어 처리를 돕는 프로그램으로, 사용자가 시스템에 입력하는 명령어를 실행해 주는 환경이다.', '쉘', CURRENT_TIMESTAMP),
                                                                                                         ('데이터베이스 연산', '데이터베이스에서 다수의 테이블을 연결하여 데이터를 검색하는 방법으로, 키를 통해 두 테이블을 연결하는 연산이다.', '조인', CURRENT_TIMESTAMP),
                                                                                                         ('CPU 관리', '운영체제에서, 여러 프로그램이 동시에 실행될 수 있도록 CPU 자원을 효율적으로 분배하는 기술이다.', '멀티태스킹', CURRENT_TIMESTAMP),
                                                                                                         ('메모리 관리 기법', '컴퓨터의 메모리 공간을 효과적으로 관리하기 위해 페이지 단위로 관리하며, 프레임에 데이터를 할당하는 방식이다.', '페이지 교체', CURRENT_TIMESTAMP),
                                                                                                         ('보안 프로토콜', '클라이언트와 서버 간의 연결을 암호화하여 데이터 전송의 보안성을 제공하는 프로토콜이다.', 'SSL/TLS', CURRENT_TIMESTAMP),
                                                                                                         ('데이터베이스 제약', '데이터베이스에서 하나의 컬럼 값에 대해 여러 값이 올 수 없도록 보장하는 제약 조건이다.', '유일 제약', CURRENT_TIMESTAMP),
                                                                                                         ('비트 연산', '비트 연산 중 하나로, 두 숫자에 대해 1인 자리를 비교하여 1일 때만 1을 반환하는 연산이다.', 'AND', CURRENT_TIMESTAMP),
                                                                                                         ('CPU 자원 관리', '운영체제가 여러 프로세스에게 CPU를 적절히 분배하기 위해 사용하는 기법을 무엇이라고 하나요?', '스케줄링', CURRENT_TIMESTAMP),
                                                                                                         ('프로세스 상태', '운영체제에서 하나의 프로세스가 보유한 자원을 양보하지 않아 여러 프로세스가 대기 상태에서 멈추게 되는 상황은 무엇인가요?', '데드락', CURRENT_TIMESTAMP),
                                                                                                         ('부팅 프로그램', '컴퓨터 부팅 시 가장 먼저 실행되는 소프트웨어로, 하드웨어 초기화 및 운영체제 로딩을 담당하는 프로그램은 무엇인가요?', 'BIOS', CURRENT_TIMESTAMP),
                                                                                                         ('프로세스 생성', '여러 클라이언트 요청을 처리하기 위해 서버 프로세스가 자기 자신을 복제하여 새로운 프로세스를 생성하는 것을 무엇이라 하나요?', '포크(Fork)', CURRENT_TIMESTAMP),
                                                                                                         ('데이터베이스 설계', '데이터베이스에서 정규화(Normalization)의 주요 목적은 무엇인가요?', '데이터 중복 제거', CURRENT_TIMESTAMP),
                                                                                                         ('데이터베이스 구조', '데이터베이스 테이블을 행(Row) 대신 열(Column) 중심으로 저장하여 분석 질의에 최적화된 형태를 무엇이라 하나요?', '컬럼 지향 데이터베이스', CURRENT_TIMESTAMP),
                                                                                                         ('메모리 관리 기법2', '운영체제의 메모리 관리 기법 중, 물리 메모리를 일정한 크기의 블록으로 나누고 가상 메모리와 매핑하는 방식을 무엇이라 하나요?', '페이징(Paging)', CURRENT_TIMESTAMP),
                                                                                                         ('웹 프로토콜', '컴퓨터 네트워크에서 전송 계층(TCP/UDP) 위에서 동작하며, 전 세계 웹 페이지 요청과 전송에 쓰이는 프로토콜은 무엇일까요?', 'HTTP', CURRENT_TIMESTAMP),
                                                                                                         ('도메인 시스템', 'IP 주소를 사람에게 읽기 쉬운 도메인으로 변환해주는 시스템은 무엇인가요?', 'DNS', CURRENT_TIMESTAMP),
                                                                                                         ('프로그래밍 언어 특징', '컴파일 과정에서 코드 최적화, 범위 검사, 타입 체크 등을 수행하여 실행 파일을 생성하기 전 중간 단계를 만드는 언어 특징을 무엇이라 하나요?', '정적 타입 언어', CURRENT_TIMESTAMP),
                                                                                                         ('동기화 메커니즘', '스레드끼리 공유하는 자원에 대한 접근 순서를 제어하기 위해 사용되는 메커니즘으로, 한 번에 한 스레드만 접근할 수 있도록 하는 것을 무엇이라 하나요?', '뮤텍스(Mutex)', CURRENT_TIMESTAMP),
                                                                                                         ('보안 통신', '네트워크에서 데이터 전송 시, 송신 측과 수신 측이 데이터를 암호화하고 복호화하여 보안을 유지하는 것을 무엇이라 하나요?', '암호 통신', CURRENT_TIMESTAMP),
                                                                                                         ('개발 방법론', '소프트웨어 개발에서 테스트를 먼저 작성하고, 해당 테스트를 통과할 최소한의 코드를 작성한 후 리팩토링하는 기법을 무엇이라 하나요?', 'TDD', CURRENT_TIMESTAMP),
                                                                                                         ('웹 스크립트', '웹 브라우저에서 웹 페이지를 동적으로 구성하기 위해 사용되는 표준 스크립트 언어는 무엇인가요?', 'JavaScript', CURRENT_TIMESTAMP),
                                                                                                         ('프로그래밍 기법2', '프로그램에서 특수한 상황(에러 등)이 발생했을 때, 이를 감지하고 적절히 처리하기 위해 쓰이는 메커니즘은 무엇이라 하나요?', '예외 처리', CURRENT_TIMESTAMP),
                                                                                                         ('HTTP 메서드', 'HTTP 요청 메서드 중, 서버에서 리소스를 읽어오기 위한 메서드는 무엇인가요?', 'GET', CURRENT_TIMESTAMP),
                                                                                                         ('객체지향 개념', '객체 지향 프로그래밍에서 클래스로부터 생성되며, 상태와 행동을 갖는 구체적인 실체를 무엇이라 하나요?', '객체', CURRENT_TIMESTAMP),
                                                                                                         ('네트워크 프로토콜2', '네트워크에서 데이터를 전달할 때, 흐름 제어와 오류 제어를 지원하는 신뢰성 있는 프로토콜은 무엇인가요?', 'TCP', CURRENT_TIMESTAMP),
                                                                                                         ('OSI 계층', 'OSI 7계층 중, 패킷을 세그먼트로 쪼개거나 재조립하며, 종단 간 오류 제어와 흐름 제어를 담당하는 계층은 무엇인가요?', '전송 계층', CURRENT_TIMESTAMP),
                                                                                                         ('그래픽 처리', '그래픽 처리를 위해 최적화된 프로세서로, 3D 렌더링이나 행렬 연산 등에 특화되어 있는 것은 무엇일까요?', 'GPU', CURRENT_TIMESTAMP);


LOCK TABLES `tier_history` WRITE;
/*!40000 ALTER TABLE `tier_history` DISABLE KEYS */;

INSERT INTO `tier_history` (`created_at`,`next_point`,`prev_point`,`tier_history_id`,`tier_id`,`user_id`) VALUES
                                                                                                              ('2025-02-19 10:46:06.060703',200,100,1,2,2),
                                                                                                              ('2025-02-19 10:46:28.179480',250,150,2,2,1),
                                                                                                              ('2025-02-19 10:46:56.092327',200,100,3,2,5),
                                                                                                              ('2025-02-19 11:18:36.877379',250,150,4,2,6),
                                                                                                              ('2025-02-19 11:19:29.255417',200,100,5,2,10),
                                                                                                              ('2025-02-19 11:34:27.511864',200,100,6,2,8),
                                                                                                              ('2025-02-19 11:48:12.297956',400,300,7,3,10),
                                                                                                              ('2025-02-19 11:48:26.440478',400,300,8,3,6),
                                                                                                              ('2025-02-19 11:52:34.161629',400,350,9,3,1),
                                                                                                              ('2025-02-19 13:33:51.580693',620,570,10,4,10),
                                                                                                              ('2025-02-20 10:30:10.303200',650,550,11,4,1),
                                                                                                              ('2025-02-20 10:30:10.337325',860,760,12,5,10),
                                                                                                              ('2025-02-20 10:30:25.367627',800,700,13,5,1),
                                                                                                              ('2025-02-20 10:36:13.050907',660,560,14,4,6),
                                                                                                              ('2025-02-20 10:36:13.067250',400,350,15,3,8),
                                                                                                              ('2025-02-20 10:36:26.055952',220,120,16,2,11),
                                                                                                              ('2025-02-20 10:36:26.074650',220,120,17,2,12),
                                                                                                              ('2025-02-20 10:38:12.218828',810,710,18,5,6),
                                                                                                              ('2025-02-20 10:42:20.705453',200,100,19,2,4),
                                                                                                              ('2025-02-20 10:42:20.722462',600,500,20,4,8),
                                                                                                              ('2025-02-20 10:42:26.642971',420,320,21,3,11),
                                                                                                              ('2025-02-20 10:42:26.651302',470,370,22,3,12),
                                                                                                              ('2025-02-20 10:45:25.576517',420,320,23,3,5),
                                                                                                              ('2025-02-20 10:45:25.597435',620,570,24,4,12),
                                                                                                              ('2025-02-20 10:48:12.813892',620,570,25,4,5),
                                                                                                              ('2025-02-20 10:48:12.823799',670,570,26,4,11),
                                                                                                              ('2025-02-20 10:48:35.817204',450,350,27,3,4),
                                                                                                              ('2025-02-20 10:48:35.825680',200,100,28,2,14),
                                                                                                              ('2025-02-20 10:48:35.833608',200,100,29,2,15),
                                                                                                              ('2025-02-20 10:51:18.278613',220,120,30,2,7),
                                                                                                              ('2025-02-20 10:51:18.300476',220,120,31,2,9),
                                                                                                              ('2025-02-20 10:52:45.162261',450,350,32,3,15),
                                                                                                              ('2025-02-20 10:52:54.360348',450,350,33,3,14),
                                                                                                              ('2025-02-20 11:50:52.714060',490,390,34,3,2),
                                                                                                              ('2025-02-20 11:50:52.743514',200,100,35,2,3),
                                                                                                              ('2025-02-20 11:50:52.767397',220,120,36,2,13),
                                                                                                              ('2025-02-20 11:54:40.525239',400,350,37,3,3),
                                                                                                              ('2025-02-20 11:54:40.536939',600,500,38,4,15),
                                                                                                              ('2025-02-20 11:54:49.425831',640,540,39,4,2),
                                                                                                              ('2025-02-20 12:07:27.959702',200,100,40,2,16);



/*!40000 ALTER TABLE `tier_history` ENABLE KEYS */;
UNLOCK TABLES;


LOCK TABLES `side_problem_history` WRITE;
/*!40000 ALTER TABLE `side_problem_history` DISABLE KEYS */;

INSERT INTO `side_problem_history` (`created_at`,`game_id`,`side_problem_history_id`,`side_problem_id`,`team_room_id`,`user_id`,`user_answer`,`result`) VALUES
                                                                                                                                                            ('2025-02-19 11:35:21.775649',5,1,8,NULL,9,'캡슐화','P'),
                                                                                                                                                            ('2025-02-19 11:47:42.641097',6,2,30,NULL,10,'정적 타입 언어','P'),
                                                                                                                                                            ('2025-02-19 11:47:57.145688',6,3,33,NULL,6,'TDD','P'),
                                                                                                                                                            ('2025-02-19 12:00:59.040244',7,4,30,NULL,7,'정적 타입 언어','P'),
                                                                                                                                                            ('2025-02-19 12:01:20.908561',7,5,12,NULL,10,'시스템 통신','F'),
                                                                                                                                                            ('2025-02-19 13:32:11.166239',9,6,13,NULL,10,'재귀','P'),
                                                                                                                                                            ('2025-02-19 13:32:24.133082',9,7,39,NULL,11,'전송 계층','P'),
                                                                                                                                                            ('2025-02-19 13:32:39.170706',9,8,3,NULL,12,'가비지 컬렉션','P'),
                                                                                                                                                            ('2025-02-19 13:32:51.525493',9,9,11,NULL,13,'큐','P'),
                                                                                                                                                            ('2025-02-19 13:33:01.328400',9,10,7,NULL,14,'쉘','F'),
                                                                                                                                                            ('2025-02-19 13:50:00.426330',10,11,2,NULL,1,'큐','F'),
                                                                                                                                                            ('2025-02-19 13:50:13.124821',10,12,20,NULL,10,'AND','P'),
                                                                                                                                                            ('2025-02-19 13:50:35.802858',10,13,39,NULL,6,'전송 계층','P'),
                                                                                                                                                            ('2025-02-19 13:50:48.650789',10,14,33,NULL,2,'TDD','P'),
                                                                                                                                                            ('2025-02-19 14:00:10.051528',10,15,32,NULL,6,'암호 통신','P'),
                                                                                                                                                            ('2025-02-19 14:00:23.460393',10,16,3,NULL,2,'가비지 컬렉션','P'),
                                                                                                                                                            ('2025-02-19 14:00:37.461767',10,17,8,NULL,5,'캡슐화','P');

/*!40000 ALTER TABLE `point_history` ENABLE KEYS */;
UNLOCK TABLES;

LOCK TABLES `point_history` WRITE;
/*!40000 ALTER TABLE `point_history` DISABLE KEYS */;

INSERT INTO `point_history` (`point`,`created_at`,`game_id`,`point_history_id`,`side_problem_id`,`user_id`,`game_type`,`point_type`) VALUES
                                                                                                                                         (100,'2025-02-19 10:40:45.352534',1,1,NULL,1,'S','D'),
                                                                                                                                         (50,'2025-02-19 10:40:45.356907',1,2,NULL,1,'S','B'),
                                                                                                                                         (100,'2025-02-19 10:40:57.795633',1,3,NULL,2,'S','D'),
                                                                                                                                         (100,'2025-02-19 10:41:12.247664',1,4,NULL,3,'S','D'),
                                                                                                                                         (100,'2025-02-19 10:41:18.495699',1,5,NULL,4,'S','D'),
                                                                                                                                         (100,'2025-02-19 10:41:33.890772',1,6,NULL,5,'S','D'),
                                                                                                                                         (100,'2025-02-19 10:46:06.047375',2,7,NULL,2,'S','D'),
                                                                                                                                         (50,'2025-02-19 10:46:06.050205',2,8,NULL,2,'S','B'),
                                                                                                                                         (100,'2025-02-19 10:46:28.169591',2,9,NULL,1,'S','D'),
                                                                                                                                         (100,'2025-02-19 10:46:56.087033',2,10,NULL,5,'S','D'),
                                                                                                                                         (100,'2025-02-19 11:15:08.435826',3,11,NULL,6,'S','D'),
                                                                                                                                         (50,'2025-02-19 11:15:08.437406',3,12,NULL,6,'S','B'),
                                                                                                                                         (100,'2025-02-19 11:15:45.656416',3,13,NULL,10,'S','D'),
                                                                                                                                         (100,'2025-02-19 11:16:29.282025',3,14,NULL,8,'S','D'),
                                                                                                                                         (100,'2025-02-19 11:18:36.865550',4,15,NULL,6,'S','D'),
                                                                                                                                         (50,'2025-02-19 11:18:36.868605',4,16,NULL,6,'S','B'),
                                                                                                                                         (100,'2025-02-19 11:19:29.250164',4,17,NULL,10,'S','D'),
                                                                                                                                         (100,'2025-02-19 11:34:27.502327',5,18,NULL,8,'S','D'),
                                                                                                                                         (50,'2025-02-19 11:34:27.504963',5,19,NULL,8,'S','B'),
                                                                                                                                         (100,'2025-02-19 11:36:07.497377',5,20,NULL,10,'S','D'),
                                                                                                                                         (100,'2025-02-19 11:36:19.383833',5,21,NULL,9,'S','D'),
                                                                                                                                         (20,'2025-02-19 11:36:19.386154',5,22,8,9,'S','S'),
                                                                                                                                         (100,'2025-02-19 11:48:12.289878',6,23,NULL,10,'S','D'),
                                                                                                                                         (50,'2025-02-19 11:48:12.292109',6,24,NULL,10,'S','B'),
                                                                                                                                         (20,'2025-02-19 11:48:12.293190',6,25,30,10,'S','S'),
                                                                                                                                         (100,'2025-02-19 11:48:26.430658',6,26,NULL,6,'S','D'),
                                                                                                                                         (20,'2025-02-19 11:48:26.433236',6,27,33,6,'S','S'),
                                                                                                                                         (100,'2025-02-19 11:52:34.146639',7,28,NULL,1,'S','D'),
                                                                                                                                         (50,'2025-02-19 11:52:34.150177',7,29,NULL,1,'S','B'),
                                                                                                                                         (100,'2025-02-19 12:01:38.037975',7,30,NULL,7,'S','D'),
                                                                                                                                         (20,'2025-02-19 12:01:38.040762',7,31,30,7,'S','S'),
                                                                                                                                         (100,'2025-02-19 13:33:51.570396',9,32,NULL,10,'S','D'),
                                                                                                                                         (50,'2025-02-19 13:33:51.571388',9,33,NULL,10,'S','B'),
                                                                                                                                         (20,'2025-02-19 13:33:51.573359',9,34,13,10,'S','S'),
                                                                                                                                         (100,'2025-02-19 13:34:30.047733',9,35,NULL,11,'S','D'),
                                                                                                                                         (20,'2025-02-19 13:34:30.049939',9,36,39,11,'S','S'),
                                                                                                                                         (100,'2025-02-19 13:35:08.234274',9,37,NULL,12,'S','D'),
                                                                                                                                         (20,'2025-02-19 13:35:08.236458',9,38,3,12,'S','S'),
                                                                                                                                         (100,'2025-02-19 13:35:20.857236',9,39,NULL,13,'S','D'),
                                                                                                                                         (20,'2025-02-19 13:35:20.859966',9,40,11,13,'S','S'),
                                                                                                                                         (100,'2025-02-19 13:35:34.582385',9,41,NULL,14,'S','D'),
                                                                                                                                         (100,'2025-02-19 13:52:34.081543',10,42,NULL,1,'S','D'),
                                                                                                                                         (50,'2025-02-19 13:52:34.084220',10,43,NULL,1,'S','B'),
                                                                                                                                         (100,'2025-02-19 13:55:20.936677',10,44,NULL,10,'S','D'),
                                                                                                                                         (20,'2025-02-19 13:55:20.937993',10,45,20,10,'S','S'),
                                                                                                                                         (100,'2025-02-19 14:01:29.756181',10,46,NULL,6,'S','D'),
                                                                                                                                         (20,'2025-02-19 14:01:29.758739',10,47,39,6,'S','S'),
                                                                                                                                         (20,'2025-02-19 14:01:29.760302',10,48,32,6,'S','S'),
                                                                                                                                         (100,'2025-02-19 14:01:37.501762',10,49,NULL,2,'S','D'),
                                                                                                                                         (20,'2025-02-19 14:01:37.503963',10,50,33,2,'S','S'),
                                                                                                                                         (20,'2025-02-19 14:01:37.506132',10,51,3,2,'S','S'),
                                                                                                                                         (100,'2025-02-19 14:01:44.116340',10,52,NULL,5,'S','D'),
                                                                                                                                         (20,'2025-02-19 14:01:44.117910',10,53,8,5,'S','S'),
                                                                                                                                         (100,'2025-02-20 10:30:10.279453',11,54,NULL,1,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:30:10.281568',11,55,NULL,1,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:30:10.283221',11,56,NULL,10,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:30:10.284804',11,57,NULL,10,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:30:25.358561',11,58,NULL,1,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:30:25.360727',11,59,NULL,10,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:36:13.038753',12,60,NULL,6,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:36:13.040340',12,61,NULL,6,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:36:13.041524',12,62,NULL,8,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:36:13.043609',12,63,NULL,8,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:36:26.045864',12,64,NULL,11,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:36:26.047448',12,65,NULL,12,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:38:12.208850',13,66,NULL,6,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:38:12.210442',13,67,NULL,6,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:38:12.211498',13,68,NULL,12,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:38:12.212574',13,69,NULL,12,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:38:19.392472',13,70,NULL,8,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:38:19.394062',13,71,NULL,11,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:42:20.689429',14,72,NULL,4,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:42:20.691729',14,73,NULL,4,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:42:20.693301',14,74,NULL,8,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:42:20.695486',14,75,NULL,8,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:42:26.635571',14,76,NULL,11,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:42:26.636612',14,77,NULL,12,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:45:25.565485',15,78,NULL,5,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:45:25.567061',15,79,NULL,5,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:45:25.568116',15,80,NULL,11,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:45:25.568633',15,81,NULL,11,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:45:25.569708',15,82,NULL,12,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:45:25.570766',15,83,NULL,12,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:45:32.139003',15,84,NULL,4,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:45:32.140676',15,85,NULL,15,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:48:12.799577',16,86,NULL,5,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:48:12.800606',16,87,NULL,5,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:48:12.802290',16,88,NULL,11,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:48:12.802809',16,89,NULL,11,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:48:12.803846',16,90,NULL,12,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:48:12.805411',16,91,NULL,12,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:48:35.808798',16,92,NULL,4,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:48:35.809863',16,93,NULL,14,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:48:35.810903',16,94,NULL,15,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:51:14.767541',17,95,NULL,14,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:51:14.768590',17,96,NULL,14,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:51:14.769663',17,97,NULL,15,'T','D'),
                                                                                                                                         (50,'2025-02-20 10:51:14.770712',17,98,NULL,15,'T','B'),
                                                                                                                                         (100,'2025-02-20 10:51:18.272295',17,99,NULL,7,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:51:18.273355',17,100,NULL,9,'T','D'),
                                                                                                                                         (100,'2025-02-20 10:52:45.157510',18,101,NULL,15,'S','D'),
                                                                                                                                         (50,'2025-02-20 10:52:45.158567',18,102,NULL,15,'S','B'),
                                                                                                                                         (100,'2025-02-20 10:52:54.353780',18,103,NULL,14,'S','D'),
                                                                                                                                         (100,'2025-02-20 11:50:52.671775',19,104,NULL,2,'T','D'),
                                                                                                                                         (50,'2025-02-20 11:50:52.674708',19,105,NULL,2,'T','B'),
                                                                                                                                         (100,'2025-02-20 11:50:52.677812',19,106,NULL,3,'T','D'),
                                                                                                                                         (50,'2025-02-20 11:50:52.686375',19,107,NULL,3,'T','B'),
                                                                                                                                         (100,'2025-02-20 11:50:52.689673',19,108,NULL,13,'T','D'),
                                                                                                                                         (50,'2025-02-20 11:50:52.692277',19,109,NULL,13,'T','B'),
                                                                                                                                         (100,'2025-02-20 11:54:40.511737',20,110,NULL,3,'T','D'),
                                                                                                                                         (50,'2025-02-20 11:54:40.512800',20,111,NULL,3,'T','B'),
                                                                                                                                         (100,'2025-02-20 11:54:40.514367',20,112,NULL,15,'T','D'),
                                                                                                                                         (50,'2025-02-20 11:54:40.515468',20,113,NULL,15,'T','B'),
                                                                                                                                         (100,'2025-02-20 11:54:49.416227',20,114,NULL,2,'T','D'),
                                                                                                                                         (100,'2025-02-20 11:54:49.417841',20,115,NULL,5,'T','D'),
                                                                                                                                         (100,'2025-02-20 11:54:49.419402',20,116,NULL,13,'T','D'),
                                                                                                                                         (100,'2025-02-20 12:06:56.641152',22,117,NULL,17,'S','D'),
                                                                                                                                         (50,'2025-02-20 12:06:56.642288',22,118,NULL,17,'S','B'),
                                                                                                                                         (100,'2025-02-20 12:07:05.015344',22,119,NULL,16,'S','D'),
                                                                                                                                         (100,'2025-02-20 12:07:27.955991',22,120,NULL,16,'S','D');


/*!40000 ALTER TABLE `point_history` ENABLE KEYS */;
UNLOCK TABLES;




/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-02-09 13:39:30